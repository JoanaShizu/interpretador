//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LangGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, LIB=5, INCLUDE=6, DEFINE=7, RELOP=8, COMMENTLINE=9, 
		COMMENTBLOCK=10, INT=11, FLOAT=12, CHAR=13, DOUBLE=14, VOID=15, MAIN=16, 
		COMMA=17, PLUS=18, MINUS=19, MULT=20, DIV=21, MOD=22, AND=23, OR=24, NOT=25, 
		CD=26, CE=27, PD=28, PE=29, CO=30, CC=31, SOMA=32, SUB=33, ASSIGN=34, 
		DOT=35, RETURN=36, SCAN=37, PRINT=38, GETS=39, PUTS=40, STRUCT=41, UNION=42, 
		IF=43, ELSE=44, SWITCH=45, CASE=46, BREAK=47, DEFAULT=48, WHILE=49, FOR=50, 
		DO=51, TYPEOF=52, WS=53, VAR=54, NUM=55, CONSTANT=56, FORMAT=57, STR=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "LIB", "INCLUDE", "DEFINE", "RELOP", "COMMENTLINE", 
		"COMMENTBLOCK", "INT", "FLOAT", "CHAR", "DOUBLE", "VOID", "MAIN", "COMMA", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "AND", "OR", "NOT", "CD", "CE", 
		"PD", "PE", "CO", "CC", "SOMA", "SUB", "ASSIGN", "DOT", "RETURN", "SCAN", 
		"PRINT", "GETS", "PUTS", "STRUCT", "UNION", "IF", "ELSE", "SWITCH", "CASE", 
		"BREAK", "DEFAULT", "WHILE", "FOR", "DO", "TYPEOF", "WS", "VAR", "NUM", 
		"CONSTANT", "FORMAT", "STR"
	};


	public LangGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LangGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'&'", "':'", "'?'", null, "'#include'", "'#define'", null, 
		null, null, "'int'", "'float'", "'char'", "'double'", "'void'", "'main'", 
		"','", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'{'", 
		"'}'", "'('", "')'", "'['", "']'", "'++'", "'--'", "'='", "'.'", "'return'", 
		"'scanf'", "'printf'", "'gets'", "'puts'", "'struct'", "'union'", "'if'", 
		"'else'", "'switch'", "'case'", "'break'", "'default'", "'while'", "'for'", 
		"'do'", "'typeof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "LIB", "INCLUDE", "DEFINE", "RELOP", "COMMENTLINE", 
		"COMMENTBLOCK", "INT", "FLOAT", "CHAR", "DOUBLE", "VOID", "MAIN", "COMMA", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "AND", "OR", "NOT", "CD", "CE", 
		"PD", "PE", "CO", "CC", "SOMA", "SUB", "ASSIGN", "DOT", "RETURN", "SCAN", 
		"PRINT", "GETS", "PUTS", "STRUCT", "UNION", "IF", "ELSE", "SWITCH", "CASE", 
		"BREAK", "DEFAULT", "WHILE", "FOR", "DO", "TYPEOF", "WS", "VAR", "NUM", 
		"CONSTANT", "FORMAT", "STR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,420,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,5,4,129,8,4,
		10,4,12,4,132,9,4,1,4,1,4,1,4,1,4,5,4,138,8,4,10,4,12,4,141,9,4,1,4,1,
		4,1,4,1,4,3,4,147,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,176,8,
		7,1,8,1,8,1,8,1,8,5,8,182,8,8,10,8,12,8,185,9,8,1,8,1,8,1,9,1,9,1,9,1,
		9,5,9,193,8,9,10,9,12,9,196,9,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
		1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
		1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
		1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
		1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,
		4,52,375,8,52,11,52,12,52,376,1,52,1,52,1,53,1,53,5,53,383,8,53,10,53,
		12,53,386,9,53,1,54,4,54,389,8,54,11,54,12,54,390,1,55,4,55,394,8,55,11,
		55,12,55,395,1,55,1,55,4,55,400,8,55,11,55,12,55,401,3,55,404,8,55,1,56,
		1,56,1,56,1,56,1,56,1,56,1,57,1,57,5,57,414,8,57,10,57,12,57,417,9,57,
		1,57,1,57,1,194,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
		35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
		47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
		115,58,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,
		10,13,13,3,0,9,10,13,13,32,32,1,0,48,57,3,0,99,102,115,115,120,120,2,0,
		10,10,34,34,436,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
		0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,
		0,0,0,3,119,1,0,0,0,5,121,1,0,0,0,7,123,1,0,0,0,9,146,1,0,0,0,11,148,1,
		0,0,0,13,157,1,0,0,0,15,175,1,0,0,0,17,177,1,0,0,0,19,188,1,0,0,0,21,202,
		1,0,0,0,23,206,1,0,0,0,25,212,1,0,0,0,27,217,1,0,0,0,29,224,1,0,0,0,31,
		229,1,0,0,0,33,234,1,0,0,0,35,236,1,0,0,0,37,238,1,0,0,0,39,240,1,0,0,
		0,41,242,1,0,0,0,43,244,1,0,0,0,45,246,1,0,0,0,47,249,1,0,0,0,49,252,1,
		0,0,0,51,254,1,0,0,0,53,256,1,0,0,0,55,258,1,0,0,0,57,260,1,0,0,0,59,262,
		1,0,0,0,61,264,1,0,0,0,63,266,1,0,0,0,65,269,1,0,0,0,67,272,1,0,0,0,69,
		274,1,0,0,0,71,276,1,0,0,0,73,283,1,0,0,0,75,289,1,0,0,0,77,296,1,0,0,
		0,79,301,1,0,0,0,81,306,1,0,0,0,83,313,1,0,0,0,85,319,1,0,0,0,87,322,1,
		0,0,0,89,327,1,0,0,0,91,334,1,0,0,0,93,339,1,0,0,0,95,345,1,0,0,0,97,353,
		1,0,0,0,99,359,1,0,0,0,101,363,1,0,0,0,103,366,1,0,0,0,105,374,1,0,0,0,
		107,380,1,0,0,0,109,388,1,0,0,0,111,393,1,0,0,0,113,405,1,0,0,0,115,411,
		1,0,0,0,117,118,5,59,0,0,118,2,1,0,0,0,119,120,5,38,0,0,120,4,1,0,0,0,
		121,122,5,58,0,0,122,6,1,0,0,0,123,124,5,63,0,0,124,8,1,0,0,0,125,126,
		5,60,0,0,126,130,7,0,0,0,127,129,7,1,0,0,128,127,1,0,0,0,129,132,1,0,0,
		0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,
		147,5,62,0,0,134,135,5,34,0,0,135,139,7,0,0,0,136,138,7,1,0,0,137,136,
		1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,
		0,141,139,1,0,0,0,142,143,5,46,0,0,143,144,5,104,0,0,144,145,1,0,0,0,145,
		147,5,34,0,0,146,125,1,0,0,0,146,134,1,0,0,0,147,10,1,0,0,0,148,149,5,
		35,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,99,0,0,152,153,5,
		108,0,0,153,154,5,117,0,0,154,155,5,100,0,0,155,156,5,101,0,0,156,12,1,
		0,0,0,157,158,5,35,0,0,158,159,5,100,0,0,159,160,5,101,0,0,160,161,5,102,
		0,0,161,162,5,105,0,0,162,163,5,110,0,0,163,164,5,101,0,0,164,14,1,0,0,
		0,165,166,5,61,0,0,166,176,5,61,0,0,167,168,5,33,0,0,168,176,5,61,0,0,
		169,176,5,60,0,0,170,171,5,60,0,0,171,176,5,61,0,0,172,176,5,62,0,0,173,
		174,5,62,0,0,174,176,5,61,0,0,175,165,1,0,0,0,175,167,1,0,0,0,175,169,
		1,0,0,0,175,170,1,0,0,0,175,172,1,0,0,0,175,173,1,0,0,0,176,16,1,0,0,0,
		177,178,5,47,0,0,178,179,5,47,0,0,179,183,1,0,0,0,180,182,8,2,0,0,181,
		180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,
		0,0,0,185,183,1,0,0,0,186,187,6,8,0,0,187,18,1,0,0,0,188,189,5,47,0,0,
		189,190,5,42,0,0,190,194,1,0,0,0,191,193,9,0,0,0,192,191,1,0,0,0,193,196,
		1,0,0,0,194,195,1,0,0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,
		0,197,198,5,42,0,0,198,199,5,47,0,0,199,200,1,0,0,0,200,201,6,9,0,0,201,
		20,1,0,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,116,0,0,205,22,
		1,0,0,0,206,207,5,102,0,0,207,208,5,108,0,0,208,209,5,111,0,0,209,210,
		5,97,0,0,210,211,5,116,0,0,211,24,1,0,0,0,212,213,5,99,0,0,213,214,5,104,
		0,0,214,215,5,97,0,0,215,216,5,114,0,0,216,26,1,0,0,0,217,218,5,100,0,
		0,218,219,5,111,0,0,219,220,5,117,0,0,220,221,5,98,0,0,221,222,5,108,0,
		0,222,223,5,101,0,0,223,28,1,0,0,0,224,225,5,118,0,0,225,226,5,111,0,0,
		226,227,5,105,0,0,227,228,5,100,0,0,228,30,1,0,0,0,229,230,5,109,0,0,230,
		231,5,97,0,0,231,232,5,105,0,0,232,233,5,110,0,0,233,32,1,0,0,0,234,235,
		5,44,0,0,235,34,1,0,0,0,236,237,5,43,0,0,237,36,1,0,0,0,238,239,5,45,0,
		0,239,38,1,0,0,0,240,241,5,42,0,0,241,40,1,0,0,0,242,243,5,47,0,0,243,
		42,1,0,0,0,244,245,5,37,0,0,245,44,1,0,0,0,246,247,5,38,0,0,247,248,5,
		38,0,0,248,46,1,0,0,0,249,250,5,124,0,0,250,251,5,124,0,0,251,48,1,0,0,
		0,252,253,5,33,0,0,253,50,1,0,0,0,254,255,5,123,0,0,255,52,1,0,0,0,256,
		257,5,125,0,0,257,54,1,0,0,0,258,259,5,40,0,0,259,56,1,0,0,0,260,261,5,
		41,0,0,261,58,1,0,0,0,262,263,5,91,0,0,263,60,1,0,0,0,264,265,5,93,0,0,
		265,62,1,0,0,0,266,267,5,43,0,0,267,268,5,43,0,0,268,64,1,0,0,0,269,270,
		5,45,0,0,270,271,5,45,0,0,271,66,1,0,0,0,272,273,5,61,0,0,273,68,1,0,0,
		0,274,275,5,46,0,0,275,70,1,0,0,0,276,277,5,114,0,0,277,278,5,101,0,0,
		278,279,5,116,0,0,279,280,5,117,0,0,280,281,5,114,0,0,281,282,5,110,0,
		0,282,72,1,0,0,0,283,284,5,115,0,0,284,285,5,99,0,0,285,286,5,97,0,0,286,
		287,5,110,0,0,287,288,5,102,0,0,288,74,1,0,0,0,289,290,5,112,0,0,290,291,
		5,114,0,0,291,292,5,105,0,0,292,293,5,110,0,0,293,294,5,116,0,0,294,295,
		5,102,0,0,295,76,1,0,0,0,296,297,5,103,0,0,297,298,5,101,0,0,298,299,5,
		116,0,0,299,300,5,115,0,0,300,78,1,0,0,0,301,302,5,112,0,0,302,303,5,117,
		0,0,303,304,5,116,0,0,304,305,5,115,0,0,305,80,1,0,0,0,306,307,5,115,0,
		0,307,308,5,116,0,0,308,309,5,114,0,0,309,310,5,117,0,0,310,311,5,99,0,
		0,311,312,5,116,0,0,312,82,1,0,0,0,313,314,5,117,0,0,314,315,5,110,0,0,
		315,316,5,105,0,0,316,317,5,111,0,0,317,318,5,110,0,0,318,84,1,0,0,0,319,
		320,5,105,0,0,320,321,5,102,0,0,321,86,1,0,0,0,322,323,5,101,0,0,323,324,
		5,108,0,0,324,325,5,115,0,0,325,326,5,101,0,0,326,88,1,0,0,0,327,328,5,
		115,0,0,328,329,5,119,0,0,329,330,5,105,0,0,330,331,5,116,0,0,331,332,
		5,99,0,0,332,333,5,104,0,0,333,90,1,0,0,0,334,335,5,99,0,0,335,336,5,97,
		0,0,336,337,5,115,0,0,337,338,5,101,0,0,338,92,1,0,0,0,339,340,5,98,0,
		0,340,341,5,114,0,0,341,342,5,101,0,0,342,343,5,97,0,0,343,344,5,107,0,
		0,344,94,1,0,0,0,345,346,5,100,0,0,346,347,5,101,0,0,347,348,5,102,0,0,
		348,349,5,97,0,0,349,350,5,117,0,0,350,351,5,108,0,0,351,352,5,116,0,0,
		352,96,1,0,0,0,353,354,5,119,0,0,354,355,5,104,0,0,355,356,5,105,0,0,356,
		357,5,108,0,0,357,358,5,101,0,0,358,98,1,0,0,0,359,360,5,102,0,0,360,361,
		5,111,0,0,361,362,5,114,0,0,362,100,1,0,0,0,363,364,5,100,0,0,364,365,
		5,111,0,0,365,102,1,0,0,0,366,367,5,116,0,0,367,368,5,121,0,0,368,369,
		5,112,0,0,369,370,5,101,0,0,370,371,5,111,0,0,371,372,5,102,0,0,372,104,
		1,0,0,0,373,375,7,3,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,374,1,0,0,
		0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,6,52,0,0,379,106,1,0,0,0,380,
		384,7,0,0,0,381,383,7,1,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,
		0,0,0,384,385,1,0,0,0,385,108,1,0,0,0,386,384,1,0,0,0,387,389,7,4,0,0,
		388,387,1,0,0,0,389,390,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,110,
		1,0,0,0,392,394,7,4,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,
		0,395,396,1,0,0,0,396,403,1,0,0,0,397,399,5,46,0,0,398,400,7,4,0,0,399,
		398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,
		0,0,0,403,397,1,0,0,0,403,404,1,0,0,0,404,112,1,0,0,0,405,406,5,34,0,0,
		406,407,5,37,0,0,407,408,1,0,0,0,408,409,7,5,0,0,409,410,5,34,0,0,410,
		114,1,0,0,0,411,415,5,34,0,0,412,414,8,6,0,0,413,412,1,0,0,0,414,417,1,
		0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,1,0,0,0,
		418,419,5,34,0,0,419,116,1,0,0,0,14,0,130,139,146,175,183,194,376,384,
		390,395,401,403,415,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
