//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LangGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, LIBRARY_NAME=30, PRINT_FUNCTION=31, 
		STRING=32, INT_LITERAL=33, FLOAT_LITERAL=34, CHAR_LITERAL=35, ID=36, WS=37;
	public const int
		RULE_program = 0, RULE_include = 1, RULE_mainFunction = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_expression = 5, RULE_declaration = 6, RULE_type = 7, 
		RULE_returnStatement = 8;
	public static readonly string[] ruleNames = {
		"program", "include", "mainFunction", "block", "statement", "expression", 
		"declaration", "type", "returnStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#include'", "'<'", "'>'", "'int'", "'main'", "'('", "')'", "'void'", 
		"'{'", "'}'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'>='", "'<='", "'&&'", "'||'", "'!'", "'='", "'['", "']'", "'float'", 
		"'char'", "'return'", null, "'printf'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "LIBRARY_NAME", "PRINT_FUNCTION", 
		"STRING", "INT_LITERAL", "FLOAT_LITERAL", "CHAR_LITERAL", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LangGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 18;
				include();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24;
			mainFunction();
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY_NAME() { return GetToken(LangGrammarParser.LIBRARY_NAME, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(T__0);
			State = 28;
			Match(T__1);
			State = 29;
			Match(LIBRARY_NAME);
			State = 30;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_mainFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__3);
			State = 33;
			Match(T__4);
			State = 34;
			Match(T__5);
			State = 35;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 36;
			Match(T__6);
			State = 37;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(T__8);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131399155728L) != 0)) {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRINT_FUNCTION:
				case INT_LITERAL:
				case FLOAT_LITERAL:
				case CHAR_LITERAL:
				case ID:
					{
					State = 40;
					statement();
					}
					break;
				case T__3:
				case T__26:
				case T__27:
					{
					State = 41;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			returnStatement();
			State = 48;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_FUNCTION() { return GetToken(LangGrammarParser.PRINT_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT_FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				Match(PRINT_FUNCTION);
				State = 51;
				Match(T__5);
				State = 52;
				Match(STRING);
				State = 53;
				Match(T__6);
				State = 54;
				Match(T__10);
				}
				break;
			case INT_LITERAL:
			case FLOAT_LITERAL:
			case CHAR_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				expression(0);
				State = 56;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(LangGrammarParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(LangGrammarParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(LangGrammarParser.CHAR_LITERAL, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 61;
				Match(ID);
				State = 62;
				Match(T__23);
				State = 63;
				expression(5);
				}
				break;
			case 2:
				{
				State = 64;
				Match(INT_LITERAL);
				}
				break;
			case 3:
				{
				State = 65;
				Match(FLOAT_LITERAL);
				}
				break;
			case 4:
				{
				State = 66;
				Match(CHAR_LITERAL);
				}
				break;
			case 5:
				{
				State = 67;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 70;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 71;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16773132L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 72;
					expression(7);
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LangGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(LangGrammarParser.INT_LITERAL, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			type();
			State = 79;
			Match(ID);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 80;
				Match(T__23);
				State = 81;
				expression(0);
				}
			}

			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 84;
				Match(T__24);
				State = 85;
				Match(INT_LITERAL);
				State = 86;
				Match(T__25);
				}
			}

			State = 89;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 402653200L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__28);
			State = 94;
			expression(0);
			State = 95;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,37,98,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,43,8,3,10,3,12,3,46,
		9,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,59,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,3,5,69,8,5,1,5,1,5,1,5,5,5,74,8,5,10,5,12,5,77,9,5,
		1,6,1,6,1,6,1,6,3,6,83,8,6,1,6,1,6,1,6,3,6,88,8,6,1,6,1,6,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,0,1,10,9,0,2,4,6,8,10,12,14,16,0,3,1,0,7,8,2,0,2,3,12,
		23,2,0,4,4,27,28,99,0,21,1,0,0,0,2,27,1,0,0,0,4,32,1,0,0,0,6,39,1,0,0,
		0,8,58,1,0,0,0,10,68,1,0,0,0,12,78,1,0,0,0,14,91,1,0,0,0,16,93,1,0,0,0,
		18,20,3,2,1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,
		22,24,1,0,0,0,23,21,1,0,0,0,24,25,3,4,2,0,25,26,5,0,0,1,26,1,1,0,0,0,27,
		28,5,1,0,0,28,29,5,2,0,0,29,30,5,30,0,0,30,31,5,3,0,0,31,3,1,0,0,0,32,
		33,5,4,0,0,33,34,5,5,0,0,34,35,5,6,0,0,35,36,7,0,0,0,36,37,5,7,0,0,37,
		38,3,6,3,0,38,5,1,0,0,0,39,44,5,9,0,0,40,43,3,8,4,0,41,43,3,12,6,0,42,
		40,1,0,0,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,
		47,1,0,0,0,46,44,1,0,0,0,47,48,3,16,8,0,48,49,5,10,0,0,49,7,1,0,0,0,50,
		51,5,31,0,0,51,52,5,6,0,0,52,53,5,32,0,0,53,54,5,7,0,0,54,59,5,11,0,0,
		55,56,3,10,5,0,56,57,5,11,0,0,57,59,1,0,0,0,58,50,1,0,0,0,58,55,1,0,0,
		0,59,9,1,0,0,0,60,61,6,5,-1,0,61,62,5,36,0,0,62,63,5,24,0,0,63,69,3,10,
		5,5,64,69,5,33,0,0,65,69,5,34,0,0,66,69,5,35,0,0,67,69,5,36,0,0,68,60,
		1,0,0,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,75,
		1,0,0,0,70,71,10,6,0,0,71,72,7,1,0,0,72,74,3,10,5,7,73,70,1,0,0,0,74,77,
		1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,11,1,0,0,0,77,75,1,0,0,0,78,79,
		3,14,7,0,79,82,5,36,0,0,80,81,5,24,0,0,81,83,3,10,5,0,82,80,1,0,0,0,82,
		83,1,0,0,0,83,87,1,0,0,0,84,85,5,25,0,0,85,86,5,33,0,0,86,88,5,26,0,0,
		87,84,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,5,11,0,0,90,13,1,0,0,0,
		91,92,7,2,0,0,92,15,1,0,0,0,93,94,5,29,0,0,94,95,3,10,5,0,95,96,5,11,0,
		0,96,17,1,0,0,0,8,21,42,44,58,68,75,82,87
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
