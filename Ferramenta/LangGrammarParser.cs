//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LangGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, RELOP=7, COMMENTLINE=8, 
		COMMENTBLOCK=9, BIB=10, INT=11, FLOAT=12, CHAR=13, DOUBLE=14, VOID=15, 
		MAIN=16, COMMA=17, PV=18, PLUS=19, MINUS=20, MULT=21, DIV=22, MOD=23, 
		AND=24, OR=25, NOT=26, CD=27, CE=28, PD=29, PE=30, CO=31, CC=32, SOMA=33, 
		SUB=34, ASSIGN=35, DOT=36, RETURN=37, SCAN=38, PRINT=39, GETS=40, PUTS=41, 
		STRUCT=42, UNION=43, IF=44, ELSE=45, SWITCH=46, CASE=47, BREAK=48, DEFAULT=49, 
		WHILE=50, FOR=51, DO=52, TYPEOF=53, WS=54, VAR=55, NUM=56, CONSTANT=57, 
		CHARLIT=58, FORMAT=59, STR=60;
	public const int
		RULE_programa = 0, RULE_cabecalho = 1, RULE_includeDecl = 2, RULE_defineDecl = 3, 
		RULE_corpo = 4, RULE_mainFunction = 5, RULE_functionDecl = 6, RULE_functionblock = 7, 
		RULE_bloco = 8, RULE_structDecl = 9, RULE_structInstDecl = 10, RULE_structMember = 11, 
		RULE_structAccess = 12, RULE_structFieldAccess = 13, RULE_linhas = 14, 
		RULE_comentario = 15, RULE_atrib = 16, RULE_callFunction = 17, RULE_arrayDecl = 18, 
		RULE_size = 19, RULE_elementosArray = 20, RULE_arrayAccess = 21, RULE_pointerDecl = 22, 
		RULE_pointerAssign = 23, RULE_pointerDereference = 24, RULE_input = 25, 
		RULE_output = 26, RULE_getsStmt = 27, RULE_putsStmt = 28, RULE_structLiteral = 29, 
		RULE_parametros = 30, RULE_tipo = 31, RULE_argumentos = 32, RULE_unionDecl = 33, 
		RULE_unionFields = 34, RULE_unionAccess = 35, RULE_decisionFunc = 36, 
		RULE_switchCase = 37, RULE_caseBlock = 38, RULE_defaultBlock = 39, RULE_loopFunc = 40, 
		RULE_whileLoop = 41, RULE_forLoop = 42, RULE_doWhileLoop = 43, RULE_expression = 44, 
		RULE_arrayUpdate = 45, RULE_terminais = 46, RULE_fator = 47, RULE_argument = 48, 
		RULE_exprbloco = 49, RULE_casting = 50, RULE_typeof = 51, RULE_ternary = 52, 
		RULE_returnStmt = 53;
	public static readonly string[] ruleNames = {
		"programa", "cabecalho", "includeDecl", "defineDecl", "corpo", "mainFunction", 
		"functionDecl", "functionblock", "bloco", "structDecl", "structInstDecl", 
		"structMember", "structAccess", "structFieldAccess", "linhas", "comentario", 
		"atrib", "callFunction", "arrayDecl", "size", "elementosArray", "arrayAccess", 
		"pointerDecl", "pointerAssign", "pointerDereference", "input", "output", 
		"getsStmt", "putsStmt", "structLiteral", "parametros", "tipo", "argumentos", 
		"unionDecl", "unionFields", "unionAccess", "decisionFunc", "switchCase", 
		"caseBlock", "defaultBlock", "loopFunc", "whileLoop", "forLoop", "doWhileLoop", 
		"expression", "arrayUpdate", "terminais", "fator", "argument", "exprbloco", 
		"casting", "typeof", "ternary", "returnStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'include'", "'define'", "'&'", "':'", "'?'", null, null, 
		null, null, "'int'", "'float'", "'char'", "'double'", "'void'", "'main'", 
		"','", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "'++'", "'--'", "'='", "'.'", 
		"'return'", "'scanf'", "'printf'", "'gets'", "'puts'", "'struct'", "'union'", 
		"'if'", "'else'", "'switch'", "'case'", "'break'", "'default'", "'while'", 
		"'for'", "'do'", "'typeof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "RELOP", "COMMENTLINE", "COMMENTBLOCK", 
		"BIB", "INT", "FLOAT", "CHAR", "DOUBLE", "VOID", "MAIN", "COMMA", "PV", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "AND", "OR", "NOT", "CD", "CE", 
		"PD", "PE", "CO", "CC", "SOMA", "SUB", "ASSIGN", "DOT", "RETURN", "SCAN", 
		"PRINT", "GETS", "PUTS", "STRUCT", "UNION", "IF", "ELSE", "SWITCH", "CASE", 
		"BREAK", "DEFAULT", "WHILE", "FOR", "DO", "TYPEOF", "WS", "VAR", "NUM", 
		"CONSTANT", "CHARLIT", "FORMAT", "STR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CabecalhoContext cabecalho() {
			return GetRuleContext<CabecalhoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CorpoContext corpo() {
			return GetRuleContext<CorpoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LangGrammarParser.Eof, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			cabecalho();
			State = 109;
			corpo();
			State = 110;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CabecalhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncludeDeclContext[] includeDecl() {
			return GetRuleContexts<IncludeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeDeclContext includeDecl(int i) {
			return GetRuleContext<IncludeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineDeclContext[] defineDecl() {
			return GetRuleContexts<DefineDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineDeclContext defineDecl(int i) {
			return GetRuleContext<DefineDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext[] comentario() {
			return GetRuleContexts<ComentarioContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario(int i) {
			return GetRuleContext<ComentarioContext>(i);
		}
		public CabecalhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cabecalho; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCabecalho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCabecalho(this);
		}
	}

	[RuleVersion(0)]
	public CabecalhoContext cabecalho() {
		CabecalhoContext _localctx = new CabecalhoContext(Context, State);
		EnterRule(_localctx, 2, RULE_cabecalho);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 112;
					includeDecl();
					}
					} 
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 120;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
						{
						State = 118;
						defineDecl();
						}
						break;
					case COMMENTLINE:
					case COMMENTBLOCK:
						{
						State = 119;
						comentario();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIB() { return GetToken(LangGrammarParser.BIB, 0); }
		public IncludeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeDecl(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDeclContext includeDecl() {
		IncludeDeclContext _localctx = new IncludeDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_includeDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(T__0);
			State = 126;
			Match(T__1);
			State = 127;
			Match(BIB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(LangGrammarParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLIT() { return GetToken(LangGrammarParser.CHARLIT, 0); }
		public DefineDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDefineDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDefineDecl(this);
		}
	}

	[RuleVersion(0)]
	public DefineDeclContext defineDecl() {
		DefineDeclContext _localctx = new DefineDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__0);
			State = 130;
			Match(T__2);
			State = 131;
			Match(VAR);
			State = 132;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504403158265495552L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CorpoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext[] mainFunction() {
			return GetRuleContexts<MainFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction(int i) {
			return GetRuleContext<MainFunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclContext[] unionDecl() {
			return GetRuleContexts<UnionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclContext unionDecl(int i) {
			return GetRuleContext<UnionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext[] comentario() {
			return GetRuleContexts<ComentarioContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario(int i) {
			return GetRuleContext<ComentarioContext>(i);
		}
		public CorpoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_corpo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCorpo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCorpo(this);
		}
	}

	[RuleVersion(0)]
	public CorpoContext corpo() {
		CorpoContext _localctx = new CorpoContext(Context, State);
		EnterRule(_localctx, 8, RULE_corpo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36041991158561536L) != 0)) {
				{
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 134;
					structDecl();
					}
					break;
				case 2:
					{
					State = 135;
					functionDecl();
					}
					break;
				case 3:
					{
					State = 136;
					mainFunction();
					}
					break;
				case 4:
					{
					State = 137;
					unionDecl();
					}
					break;
				case 5:
					{
					State = 138;
					comentario();
					}
					break;
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(LangGrammarParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(INT);
			State = 145;
			Match(MAIN);
			State = 146;
			Match(PD);
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				{
				State = 147;
				Match(VOID);
				}
				break;
			case PE:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 151;
			Match(PE);
			State = 152;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionblockContext functionblock() {
			return GetRuleContext<FunctionblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			tipo();
			State = 155;
			Match(VAR);
			State = 156;
			Match(PD);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36041991158560768L) != 0)) {
				{
				State = 157;
				parametros();
				}
			}

			State = 160;
			Match(PE);
			State = 161;
			functionblock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public FunctionblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionblock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionblockContext functionblock() {
		FunctionblockContext _localctx = new FunctionblockContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(CD);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1710347374911617792L) != 0)) {
				{
				{
				State = 164;
				linhas();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 16, RULE_bloco);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(CD);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1710347374911617792L) != 0)) {
				{
				{
				State = 173;
				linhas();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LangGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(STRUCT);
			State = 182;
			Match(VAR);
			State = 183;
			Match(CD);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36041991158560768L) != 0)) {
				{
				{
				State = 184;
				structMember();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(CE);
			State = 191;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LangGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		public StructInstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInstDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructInstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructInstDecl(this);
		}
	}

	[RuleVersion(0)]
	public StructInstDeclContext structInstDecl() {
		StructInstDeclContext _localctx = new StructInstDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_structInstDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(STRUCT);
			State = 194;
			Match(VAR);
			State = 195;
			Match(VAR);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 196;
				Match(ASSIGN);
				State = 197;
				structLiteral();
				}
			}

			State = 200;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CO() { return GetToken(LangGrammarParser.CO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(LangGrammarParser.CC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(LangGrammarParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructMember(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 22, RULE_structMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			tipo();
			State = 203;
			Match(VAR);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CO) {
				{
				State = 204;
				Match(CO);
				State = 205;
				_la = TokenStream.LA(1);
				if ( !(_la==NUM || _la==CONSTANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 206;
				Match(CC);
				}
			}

			State = 209;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LangGrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public StructAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructAccess(this);
		}
	}

	[RuleVersion(0)]
	public StructAccessContext structAccess() {
		StructAccessContext _localctx = new StructAccessContext(Context, State);
		EnterRule(_localctx, 24, RULE_structAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(VAR);
			State = 212;
			Match(DOT);
			State = 213;
			Match(VAR);
			State = 214;
			Match(ASSIGN);
			State = 215;
			expression();
			State = 216;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LangGrammarParser.DOT, 0); }
		public StructFieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldAccessContext structFieldAccess() {
		StructFieldAccessContext _localctx = new StructFieldAccessContext(Context, State);
		EnterRule(_localctx, 26, RULE_structFieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(VAR);
			State = 219;
			Match(DOT);
			State = 220;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinhasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionAccessContext unionAccess() {
			return GetRuleContext<UnionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessContext structAccess() {
			return GetRuleContext<StructAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario() {
			return GetRuleContext<ComentarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclContext arrayDecl() {
			return GetRuleContext<ArrayDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclContext pointerDecl() {
			return GetRuleContext<PointerDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerAssignContext pointerAssign() {
			return GetRuleContext<PointerAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDereferenceContext pointerDereference() {
			return GetRuleContext<PointerDereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetsStmtContext getsStmt() {
			return GetRuleContext<GetsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PutsStmtContext putsStmt() {
			return GetRuleContext<PutsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecisionFuncContext decisionFunc() {
			return GetRuleContext<DecisionFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext switchCase() {
			return GetRuleContext<SwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopFuncContext loopFunc() {
			return GetRuleContext<LoopFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileLoopContext doWhileLoop() {
			return GetRuleContext<DoWhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastingContext casting() {
			return GetRuleContext<CastingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeofContext @typeof() {
			return GetRuleContext<TypeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LinhasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linhas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterLinhas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitLinhas(this);
		}
	}

	[RuleVersion(0)]
	public LinhasContext linhas() {
		LinhasContext _localctx = new LinhasContext(Context, State);
		EnterRule(_localctx, 28, RULE_linhas);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				unionAccess();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				structAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224;
				callFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 225;
				atrib();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 226;
				comentario();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 227;
				arrayDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 228;
				pointerDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 229;
				pointerAssign();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 230;
				pointerDereference();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 231;
				input();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 232;
				output();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 233;
				getsStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 234;
				putsStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 235;
				decisionFunc();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 236;
				switchCase();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 237;
				loopFunc();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 238;
				doWhileLoop();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 239;
				casting();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 240;
				@typeof();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 241;
				ternary();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 242;
				returnStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComentarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTLINE() { return GetToken(LangGrammarParser.COMMENTLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTBLOCK() { return GetToken(LangGrammarParser.COMMENTBLOCK, 0); }
		public ComentarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comentario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterComentario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitComentario(this);
		}
	}

	[RuleVersion(0)]
	public ComentarioContext comentario() {
		ComentarioContext _localctx = new ComentarioContext(Context, State);
		EnterRule(_localctx, 30, RULE_comentario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMENTLINE || _la==COMMENTBLOCK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessContext structAccess() {
			return GetRuleContext<StructAccessContext>(0);
		}
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitAtrib(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 32, RULE_atrib);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				tipo();
				State = 248;
				Match(VAR);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 249;
					Match(ASSIGN);
					State = 250;
					expression();
					}
				}

				State = 253;
				Match(PV);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(VAR);
				State = 256;
				Match(ASSIGN);
				State = 257;
				expression();
				State = 258;
				Match(PV);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				structAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		public CallFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCallFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCallFunction(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionContext callFunction() {
		CallFunctionContext _localctx = new CallFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_callFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(VAR);
			State = 264;
			Match(PD);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1693353460629504000L) != 0)) {
				{
				State = 265;
				expression();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 266;
					Match(COMMA);
					State = 267;
					expression();
					}
					}
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 275;
			Match(PE);
			State = 276;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CO() { return GetToken(LangGrammarParser.CO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeContext size() {
			return GetRuleContext<SizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(LangGrammarParser.CC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementosArrayContext elementosArray() {
			return GetRuleContext<ElementosArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		public ArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclContext arrayDecl() {
		ArrayDeclContext _localctx = new ArrayDeclContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayDecl);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				tipo();
				State = 279;
				Match(VAR);
				State = 280;
				Match(CO);
				State = 281;
				size();
				State = 282;
				Match(CC);
				State = 283;
				Match(ASSIGN);
				State = 284;
				Match(STR);
				State = 285;
				Match(PV);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				tipo();
				State = 288;
				Match(VAR);
				State = 289;
				Match(CO);
				State = 290;
				size();
				State = 291;
				Match(CC);
				State = 292;
				Match(ASSIGN);
				State = 293;
				Match(CD);
				State = 294;
				elementosArray();
				State = 295;
				Match(CE);
				State = 296;
				Match(PV);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 298;
				tipo();
				State = 299;
				Match(VAR);
				State = 300;
				Match(CO);
				State = 301;
				size();
				State = 302;
				Match(CC);
				State = 303;
				Match(PV);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		public SizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_size; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitSize(this);
		}
	}

	[RuleVersion(0)]
	public SizeContext size() {
		SizeContext _localctx = new SizeContext(Context, State);
		EnterRule(_localctx, 38, RULE_size);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				Match(NUM);
				}
				break;
			case CC:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementosArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		public ElementosArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementosArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterElementosArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitElementosArray(this);
		}
	}

	[RuleVersion(0)]
	public ElementosArrayContext elementosArray() {
		ElementosArrayContext _localctx = new ElementosArrayContext(Context, State);
		EnterRule(_localctx, 40, RULE_elementosArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			expression();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 312;
				Match(COMMA);
				State = 313;
				expression();
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CO() { return GetToken(LangGrammarParser.CO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(LangGrammarParser.CC, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 42, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(VAR);
			State = 320;
			Match(CO);
			State = 321;
			expression();
			State = 322;
			Match(CC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public PointerDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerDecl(this);
		}
	}

	[RuleVersion(0)]
	public PointerDeclContext pointerDecl() {
		PointerDeclContext _localctx = new PointerDeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_pointerDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 325;
			Match(MULT);
			State = 326;
			Match(VAR);
			State = 327;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public PointerAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerAssign(this);
		}
	}

	[RuleVersion(0)]
	public PointerAssignContext pointerAssign() {
		PointerAssignContext _localctx = new PointerAssignContext(Context, State);
		EnterRule(_localctx, 46, RULE_pointerAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(VAR);
			State = 330;
			Match(ASSIGN);
			State = 331;
			Match(T__3);
			State = 332;
			Match(VAR);
			State = 333;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public PointerDereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerDereference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerDereference(this);
		}
	}

	[RuleVersion(0)]
	public PointerDereferenceContext pointerDereference() {
		PointerDereferenceContext _localctx = new PointerDereferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_pointerDereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(MULT);
			State = 336;
			Match(VAR);
			State = 337;
			Match(ASSIGN);
			State = 338;
			expression();
			State = 339;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCAN() { return GetToken(LangGrammarParser.SCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(LangGrammarParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LangGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 50, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(SCAN);
			State = 342;
			Match(PD);
			State = 343;
			Match(FORMAT);
			State = 344;
			Match(COMMA);
			State = 345;
			Match(T__3);
			State = 346;
			Match(VAR);
			State = 347;
			Match(PE);
			State = 348;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ArgumentContext _argument;
		public IList<ArgumentContext> _arg = new List<ArgumentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(LangGrammarParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 52, RULE_output);
		int _la;
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				Match(PRINT);
				State = 351;
				Match(PD);
				State = 352;
				Match(STR);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 353;
					Match(COMMA);
					State = 354;
					_localctx._argument = argument();
					_localctx._arg.Add(_localctx._argument);
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 360;
				Match(PE);
				State = 361;
				Match(PV);
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				Match(STR);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 363;
					Match(COMMA);
					State = 364;
					_localctx._argument = argument();
					_localctx._arg.Add(_localctx._argument);
					}
					}
					State = 369;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETS() { return GetToken(LangGrammarParser.GETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public GetsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterGetsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitGetsStmt(this);
		}
	}

	[RuleVersion(0)]
	public GetsStmtContext getsStmt() {
		GetsStmtContext _localctx = new GetsStmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_getsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(GETS);
			State = 373;
			Match(PD);
			State = 374;
			Match(VAR);
			State = 375;
			Match(PE);
			State = 376;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUTS() { return GetToken(LangGrammarParser.PUTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public PutsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPutsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPutsStmt(this);
		}
	}

	[RuleVersion(0)]
	public PutsStmtContext putsStmt() {
		PutsStmtContext _localctx = new PutsStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_putsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(PUTS);
			State = 379;
			Match(PD);
			State = 380;
			Match(VAR);
			State = 381;
			Match(PE);
			State = 382;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		public StructLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StructLiteralContext structLiteral() {
		StructLiteralContext _localctx = new StructLiteralContext(Context, State);
		EnterRule(_localctx, 58, RULE_structLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(CD);
			State = 385;
			expression();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 386;
				Match(COMMA);
				State = 387;
				expression();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 393;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext[] tipo() {
			return GetRuleContexts<TipoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo(int i) {
			return GetRuleContext<TipoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 60, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			tipo();
			State = 396;
			Match(VAR);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 397;
				Match(COMMA);
				State = 398;
				tipo();
				State = 399;
				Match(VAR);
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LangGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(LangGrammarParser.UNION, 0); }
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 62, RULE_tipo);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				Match(FLOAT);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 408;
				Match(CHAR);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409;
				Match(DOUBLE);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 410;
				Match(VOID);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 411;
				Match(STRUCT);
				State = 412;
				Match(VAR);
				}
				break;
			case UNION:
				EnterOuterAlt(_localctx, 7);
				{
				State = 413;
				Match(UNION);
				State = 414;
				Match(VAR);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 415;
				Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LangGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LangGrammarParser.COMMA, i);
		}
		public ArgumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentos(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentosContext argumentos() {
		ArgumentosContext _localctx = new ArgumentosContext(Context, State);
		EnterRule(_localctx, 64, RULE_argumentos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			expression();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 419;
				Match(COMMA);
				State = 420;
				expression();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(LangGrammarParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnionFieldsContext unionFields() {
			return GetRuleContext<UnionFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public UnionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionDecl(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclContext unionDecl() {
		UnionDeclContext _localctx = new UnionDeclContext(Context, State);
		EnterRule(_localctx, 66, RULE_unionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(UNION);
			State = 427;
			Match(VAR);
			State = 428;
			Match(CD);
			State = 429;
			unionFields();
			State = 430;
			Match(CE);
			State = 431;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PV() { return GetTokens(LangGrammarParser.PV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV(int i) {
			return GetToken(LangGrammarParser.PV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(LangGrammarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(LangGrammarParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(LangGrammarParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(LangGrammarParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(LangGrammarParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(LangGrammarParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE() { return GetTokens(LangGrammarParser.DOUBLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE(int i) {
			return GetToken(LangGrammarParser.DOUBLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VOID() { return GetTokens(LangGrammarParser.VOID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID(int i) {
			return GetToken(LangGrammarParser.VOID, i);
		}
		public UnionFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionFields(this);
		}
	}

	[RuleVersion(0)]
	public UnionFieldsContext unionFields() {
		UnionFieldsContext _localctx = new UnionFieldsContext(Context, State);
		EnterRule(_localctx, 68, RULE_unionFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 433;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 434;
				Match(VAR);
				State = 435;
				Match(PV);
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LangGrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionAccess(this);
		}
	}

	[RuleVersion(0)]
	public UnionAccessContext unionAccess() {
		UnionAccessContext _localctx = new UnionAccessContext(Context, State);
		EnterRule(_localctx, 70, RULE_unionAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(VAR);
			State = 441;
			Match(DOT);
			State = 442;
			Match(VAR);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 443;
				Match(ASSIGN);
				State = 444;
				expression();
				}
			}

			State = 447;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecisionFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(LangGrammarParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(LangGrammarParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PD() { return GetTokens(LangGrammarParser.PD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD(int i) {
			return GetToken(LangGrammarParser.PD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext[] exprbloco() {
			return GetRuleContexts<ExprblocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco(int i) {
			return GetRuleContext<ExprblocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PE() { return GetTokens(LangGrammarParser.PE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE(int i) {
			return GetToken(LangGrammarParser.PE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext[] bloco() {
			return GetRuleContexts<BlocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco(int i) {
			return GetRuleContext<BlocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(LangGrammarParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(LangGrammarParser.ELSE, i);
		}
		public DecisionFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decisionFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDecisionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDecisionFunc(this);
		}
	}

	[RuleVersion(0)]
	public DecisionFuncContext decisionFunc() {
		DecisionFuncContext _localctx = new DecisionFuncContext(Context, State);
		EnterRule(_localctx, 72, RULE_decisionFunc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(IF);
			State = 450;
			Match(PD);
			State = 451;
			exprbloco(0);
			State = 452;
			Match(PE);
			State = 453;
			bloco();
			State = 463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 454;
					Match(ELSE);
					State = 455;
					Match(IF);
					State = 456;
					Match(PD);
					State = 457;
					exprbloco(0);
					State = 458;
					Match(PE);
					State = 459;
					bloco();
					}
					} 
				}
				State = 465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 466;
				Match(ELSE);
				State = 467;
				bloco();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LangGrammarParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CD() { return GetToken(LangGrammarParser.CD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangGrammarParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(SWITCH);
			State = 471;
			Match(PD);
			State = 472;
			Match(VAR);
			State = 473;
			Match(PE);
			State = 474;
			Match(CD);
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 475;
				caseBlock();
				}
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 480;
				defaultBlock();
				}
			}

			State = 483;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LangGrammarParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LangGrammarParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(CASE);
			State = 486;
			Match(NUM);
			State = 487;
			Match(T__4);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1710347374911617792L) != 0)) {
				{
				{
				State = 488;
				linhas();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 494;
			Match(BREAK);
			State = 495;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LangGrammarParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LangGrammarParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(DEFAULT);
			State = 498;
			Match(T__4);
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1710347374911617792L) != 0)) {
				{
				{
				State = 499;
				linhas();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 505;
			Match(BREAK);
			State = 506;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public LoopFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterLoopFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitLoopFunc(this);
		}
	}

	[RuleVersion(0)]
	public LoopFuncContext loopFunc() {
		LoopFuncContext _localctx = new LoopFuncContext(Context, State);
		EnterRule(_localctx, 80, RULE_loopFunc);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				whileLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 82, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(WHILE);
			State = 513;
			Match(PD);
			State = 514;
			exprbloco(0);
			State = 515;
			Match(PE);
			State = 516;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LangGrammarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PV() { return GetTokens(LangGrammarParser.PV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV(int i) {
			return GetToken(LangGrammarParser.PV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext[] atrib() {
			return GetRuleContexts<AtribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib(int i) {
			return GetRuleContext<AtribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 84, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(FOR);
			State = 519;
			Match(PD);
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case CHAR:
			case DOUBLE:
			case VOID:
			case STRUCT:
			case UNION:
			case VAR:
				{
				State = 520;
				atrib();
				}
				break;
			case PV:
				{
				State = 521;
				Match(PV);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1693353460629504000L) != 0)) {
				{
				State = 524;
				exprbloco(0);
				}
			}

			State = 527;
			Match(PV);
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 528;
				atrib();
				}
				break;
			case 2:
				{
				State = 529;
				expression();
				}
				break;
			}
			State = 532;
			Match(PE);
			State = 533;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LangGrammarParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public DoWhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDoWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDoWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileLoopContext doWhileLoop() {
		DoWhileLoopContext _localctx = new DoWhileLoopContext(Context, State);
		EnterRule(_localctx, 86, RULE_doWhileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(DO);
			State = 536;
			bloco();
			State = 537;
			Match(WHILE);
			State = 538;
			Match(PD);
			State = 539;
			exprbloco(0);
			State = 540;
			Match(PE);
			State = 541;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminaisContext[] terminais() {
			return GetRuleContexts<TerminaisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminaisContext terminais(int i) {
			return GetRuleContext<TerminaisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(LangGrammarParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(LangGrammarParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(LangGrammarParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(LangGrammarParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldAccessContext structFieldAccess() {
			return GetRuleContext<StructFieldAccessContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_expression);
		int _la;
		try {
			int _alt;
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				structLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				terminais();
				State = 549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 545;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 546;
						terminais();
						}
						} 
					}
					State = 551;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 552;
				arrayAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 553;
				callFunction();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 554;
				structFieldAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CO() { return GetToken(LangGrammarParser.CO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(LangGrammarParser.CC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		public ArrayUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayUpdate(this);
		}
	}

	[RuleVersion(0)]
	public ArrayUpdateContext arrayUpdate() {
		ArrayUpdateContext _localctx = new ArrayUpdateContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(VAR);
			State = 558;
			Match(CO);
			State = 559;
			expression();
			State = 560;
			Match(CC);
			State = 561;
			Match(ASSIGN);
			State = 562;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminaisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext[] fator() {
			return GetRuleContexts<FatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator(int i) {
			return GetRuleContext<FatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(LangGrammarParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(LangGrammarParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(LangGrammarParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(LangGrammarParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(LangGrammarParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(LangGrammarParser.MOD, i);
		}
		public TerminaisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminais; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTerminais(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTerminais(this);
		}
	}

	[RuleVersion(0)]
	public TerminaisContext terminais() {
		TerminaisContext _localctx = new TerminaisContext(Context, State);
		EnterRule(_localctx, 92, RULE_terminais);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			fator();
			State = 569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 565;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14680064L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 566;
					fator();
					}
					} 
				}
				State = 571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LangGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldAccessContext structFieldAccess() {
			return GetRuleContext<StructFieldAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessContext structAccess() {
			return GetRuleContext<StructAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(LangGrammarParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLIT() { return GetToken(LangGrammarParser.CHARLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOMA() { return GetToken(LangGrammarParser.SOMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(LangGrammarParser.SUB, 0); }
		public FatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFator(this);
		}
	}

	[RuleVersion(0)]
	public FatorContext fator() {
		FatorContext _localctx = new FatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_fator);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				Match(NOT);
				State = 573;
				fator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				Match(PD);
				State = 575;
				expression();
				State = 576;
				Match(PE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578;
				arrayAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 579;
				structFieldAccess();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 580;
				structAccess();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 581;
				Match(NUM);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 582;
				Match(CONSTANT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 583;
				Match(VAR);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 584;
				Match(STR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 585;
				Match(CHARLIT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 586;
				Match(VAR);
				State = 587;
				Match(SOMA);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 588;
				Match(VAR);
				State = 589;
				Match(SUB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldAccessContext structFieldAccess() {
			return GetRuleContext<StructFieldAccessContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 96, RULE_argument);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				exprbloco(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594;
				arrayAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 595;
				structFieldAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprblocoContext : ParserRuleContext {
		public ExprblocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprbloco; } }
	 
		public ExprblocoContext() { }
		public virtual void CopyFrom(ExprblocoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalExpressionContext : ExprblocoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(LangGrammarParser.RELOP, 0); }
		public RelationalExpressionContext(ExprblocoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class ParentesisExpressionContext : ExprblocoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		public ParentesisExpressionContext(ExprblocoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterParentesisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitParentesisExpression(this);
		}
	}
	public partial class AndExpressionContext : ExprblocoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext[] exprbloco() {
			return GetRuleContexts<ExprblocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco(int i) {
			return GetRuleContext<ExprblocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LangGrammarParser.AND, 0); }
		public AndExpressionContext(ExprblocoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class NotExpressionContext : ExprblocoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LangGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		public NotExpressionContext(ExprblocoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class OrExpressionContext : ExprblocoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext[] exprbloco() {
			return GetRuleContexts<ExprblocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco(int i) {
			return GetRuleContext<ExprblocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LangGrammarParser.OR, 0); }
		public OrExpressionContext(ExprblocoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExprblocoContext exprbloco() {
		return exprbloco(0);
	}

	private ExprblocoContext exprbloco(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprblocoContext _localctx = new ExprblocoContext(Context, _parentState);
		ExprblocoContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_exprbloco, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new ParentesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 599;
				Match(PD);
				State = 600;
				exprbloco(0);
				State = 601;
				Match(PE);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 603;
				Match(NOT);
				State = 604;
				exprbloco(4);
				}
				break;
			case 3:
				{
				_localctx = new RelationalExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 605;
				expression();
				State = 608;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 606;
					Match(RELOP);
					State = 607;
					expression();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 618;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new AndExpressionContext(new ExprblocoContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exprbloco);
						State = 612;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 613;
						Match(AND);
						State = 614;
						exprbloco(4);
						}
						break;
					case 2:
						{
						_localctx = new OrExpressionContext(new ExprblocoContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exprbloco);
						State = 615;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 616;
						Match(OR);
						State = 617;
						exprbloco(3);
						}
						break;
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public CastingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCasting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCasting(this);
		}
	}

	[RuleVersion(0)]
	public CastingContext casting() {
		CastingContext _localctx = new CastingContext(Context, State);
		EnterRule(_localctx, 100, RULE_casting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(PD);
			State = 624;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 625;
			Match(PE);
			State = 626;
			Match(VAR);
			State = 627;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(LangGrammarParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PD() { return GetToken(LangGrammarParser.PD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PE() { return GetToken(LangGrammarParser.PE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public TypeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeof(this);
		}
	}

	[RuleVersion(0)]
	public TypeofContext @typeof() {
		TypeofContext _localctx = new TypeofContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(TYPEOF);
			State = 630;
			Match(PD);
			State = 631;
			Match(VAR);
			State = 632;
			Match(PE);
			State = 633;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 104, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			exprbloco(0);
			State = 636;
			Match(T__5);
			State = 637;
			expression();
			State = 638;
			Match(T__4);
			State = 639;
			expression();
			State = 640;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LangGrammarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PV() { return GetToken(LangGrammarParser.PV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(RETURN);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1693353460629504000L) != 0)) {
				{
				State = 643;
				expression();
				}
			}

			State = 646;
			Match(PV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return exprbloco_sempred((ExprblocoContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exprbloco_sempred(ExprblocoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,649,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,1,5,1,114,8,
		1,10,1,12,1,117,9,1,1,1,1,1,5,1,121,8,1,10,1,12,1,124,9,1,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,140,8,4,10,4,12,4,143,
		9,4,1,5,1,5,1,5,1,5,1,5,3,5,150,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,159,
		8,6,1,6,1,6,1,6,1,7,1,7,5,7,166,8,7,10,7,12,7,169,9,7,1,7,1,7,1,8,1,8,
		5,8,175,8,8,10,8,12,8,178,9,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,186,8,9,10,9,
		12,9,189,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,199,8,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,3,11,208,8,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		3,14,244,8,14,1,15,1,15,1,16,1,16,1,16,1,16,3,16,252,8,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,3,16,262,8,16,1,17,1,17,1,17,1,17,1,17,5,17,
		269,8,17,10,17,12,17,272,9,17,3,17,274,8,17,1,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,306,8,18,1,19,
		1,19,3,19,310,8,19,1,20,1,20,1,20,5,20,315,8,20,10,20,12,20,318,9,20,1,
		21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,5,26,356,8,26,10,26,12,26,359,9,
		26,1,26,1,26,1,26,1,26,1,26,5,26,366,8,26,10,26,12,26,369,9,26,3,26,371,
		8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
		1,29,1,29,1,29,5,29,389,8,29,10,29,12,29,392,9,29,1,29,1,29,1,30,1,30,
		1,30,1,30,1,30,1,30,5,30,402,8,30,10,30,12,30,405,9,30,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,417,8,31,1,32,1,32,1,32,5,32,422,
		8,32,10,32,12,32,425,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
		1,34,4,34,437,8,34,11,34,12,34,438,1,35,1,35,1,35,1,35,1,35,3,35,446,8,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,5,36,462,8,36,10,36,12,36,465,9,36,1,36,1,36,3,36,469,8,36,1,37,1,37,
		1,37,1,37,1,37,1,37,4,37,477,8,37,11,37,12,37,478,1,37,3,37,482,8,37,1,
		37,1,37,1,38,1,38,1,38,1,38,5,38,490,8,38,10,38,12,38,493,9,38,1,38,1,
		38,1,38,1,39,1,39,1,39,5,39,501,8,39,10,39,12,39,504,9,39,1,39,1,39,1,
		39,1,40,1,40,3,40,511,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
		1,42,3,42,523,8,42,1,42,3,42,526,8,42,1,42,1,42,1,42,3,42,531,8,42,1,42,
		1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
		5,44,548,8,44,10,44,12,44,551,9,44,1,44,1,44,1,44,3,44,556,8,44,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,568,8,46,10,46,12,46,571,
		9,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,3,47,591,8,47,1,48,1,48,1,48,1,48,3,48,597,8,
		48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,609,8,49,3,49,
		611,8,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,619,8,49,10,49,12,49,622,9,
		49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,
		52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,3,53,645,8,53,1,53,1,53,1,53,0,1,
		98,54,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,0,6,1,0,56,58,1,0,56,57,1,0,8,9,1,0,11,15,1,0,
		19,20,1,0,21,23,689,0,108,1,0,0,0,2,115,1,0,0,0,4,125,1,0,0,0,6,129,1,
		0,0,0,8,141,1,0,0,0,10,144,1,0,0,0,12,154,1,0,0,0,14,163,1,0,0,0,16,172,
		1,0,0,0,18,181,1,0,0,0,20,193,1,0,0,0,22,202,1,0,0,0,24,211,1,0,0,0,26,
		218,1,0,0,0,28,243,1,0,0,0,30,245,1,0,0,0,32,261,1,0,0,0,34,263,1,0,0,
		0,36,305,1,0,0,0,38,309,1,0,0,0,40,311,1,0,0,0,42,319,1,0,0,0,44,324,1,
		0,0,0,46,329,1,0,0,0,48,335,1,0,0,0,50,341,1,0,0,0,52,370,1,0,0,0,54,372,
		1,0,0,0,56,378,1,0,0,0,58,384,1,0,0,0,60,395,1,0,0,0,62,416,1,0,0,0,64,
		418,1,0,0,0,66,426,1,0,0,0,68,436,1,0,0,0,70,440,1,0,0,0,72,449,1,0,0,
		0,74,470,1,0,0,0,76,485,1,0,0,0,78,497,1,0,0,0,80,510,1,0,0,0,82,512,1,
		0,0,0,84,518,1,0,0,0,86,535,1,0,0,0,88,555,1,0,0,0,90,557,1,0,0,0,92,564,
		1,0,0,0,94,590,1,0,0,0,96,596,1,0,0,0,98,610,1,0,0,0,100,623,1,0,0,0,102,
		629,1,0,0,0,104,635,1,0,0,0,106,642,1,0,0,0,108,109,3,2,1,0,109,110,3,
		8,4,0,110,111,5,0,0,1,111,1,1,0,0,0,112,114,3,4,2,0,113,112,1,0,0,0,114,
		117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,122,1,0,0,0,117,115,1,
		0,0,0,118,121,3,6,3,0,119,121,3,30,15,0,120,118,1,0,0,0,120,119,1,0,0,
		0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,3,1,0,0,0,124,122,
		1,0,0,0,125,126,5,1,0,0,126,127,5,2,0,0,127,128,5,10,0,0,128,5,1,0,0,0,
		129,130,5,1,0,0,130,131,5,3,0,0,131,132,5,55,0,0,132,133,7,0,0,0,133,7,
		1,0,0,0,134,140,3,18,9,0,135,140,3,12,6,0,136,140,3,10,5,0,137,140,3,66,
		33,0,138,140,3,30,15,0,139,134,1,0,0,0,139,135,1,0,0,0,139,136,1,0,0,0,
		139,137,1,0,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,
		1,0,0,0,142,9,1,0,0,0,143,141,1,0,0,0,144,145,5,11,0,0,145,146,5,16,0,
		0,146,149,5,29,0,0,147,150,5,15,0,0,148,150,1,0,0,0,149,147,1,0,0,0,149,
		148,1,0,0,0,150,151,1,0,0,0,151,152,5,30,0,0,152,153,3,16,8,0,153,11,1,
		0,0,0,154,155,3,62,31,0,155,156,5,55,0,0,156,158,5,29,0,0,157,159,3,60,
		30,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,5,30,0,0,
		161,162,3,14,7,0,162,13,1,0,0,0,163,167,5,27,0,0,164,166,3,28,14,0,165,
		164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,
		0,0,0,169,167,1,0,0,0,170,171,5,28,0,0,171,15,1,0,0,0,172,176,5,27,0,0,
		173,175,3,28,14,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,
		177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,28,0,0,180,17,1,
		0,0,0,181,182,5,42,0,0,182,183,5,55,0,0,183,187,5,27,0,0,184,186,3,22,
		11,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
		190,1,0,0,0,189,187,1,0,0,0,190,191,5,28,0,0,191,192,5,18,0,0,192,19,1,
		0,0,0,193,194,5,42,0,0,194,195,5,55,0,0,195,198,5,55,0,0,196,197,5,35,
		0,0,197,199,3,58,29,0,198,196,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,
		200,201,5,18,0,0,201,21,1,0,0,0,202,203,3,62,31,0,203,207,5,55,0,0,204,
		205,5,31,0,0,205,206,7,1,0,0,206,208,5,32,0,0,207,204,1,0,0,0,207,208,
		1,0,0,0,208,209,1,0,0,0,209,210,5,18,0,0,210,23,1,0,0,0,211,212,5,55,0,
		0,212,213,5,36,0,0,213,214,5,55,0,0,214,215,5,35,0,0,215,216,3,88,44,0,
		216,217,5,18,0,0,217,25,1,0,0,0,218,219,5,55,0,0,219,220,5,36,0,0,220,
		221,5,55,0,0,221,27,1,0,0,0,222,244,3,70,35,0,223,244,3,24,12,0,224,244,
		3,34,17,0,225,244,3,32,16,0,226,244,3,30,15,0,227,244,3,36,18,0,228,244,
		3,44,22,0,229,244,3,46,23,0,230,244,3,48,24,0,231,244,3,50,25,0,232,244,
		3,52,26,0,233,244,3,54,27,0,234,244,3,56,28,0,235,244,3,72,36,0,236,244,
		3,74,37,0,237,244,3,80,40,0,238,244,3,86,43,0,239,244,3,100,50,0,240,244,
		3,102,51,0,241,244,3,104,52,0,242,244,3,106,53,0,243,222,1,0,0,0,243,223,
		1,0,0,0,243,224,1,0,0,0,243,225,1,0,0,0,243,226,1,0,0,0,243,227,1,0,0,
		0,243,228,1,0,0,0,243,229,1,0,0,0,243,230,1,0,0,0,243,231,1,0,0,0,243,
		232,1,0,0,0,243,233,1,0,0,0,243,234,1,0,0,0,243,235,1,0,0,0,243,236,1,
		0,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,0,0,0,
		243,241,1,0,0,0,243,242,1,0,0,0,244,29,1,0,0,0,245,246,7,2,0,0,246,31,
		1,0,0,0,247,248,3,62,31,0,248,251,5,55,0,0,249,250,5,35,0,0,250,252,3,
		88,44,0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,5,18,0,
		0,254,262,1,0,0,0,255,256,5,55,0,0,256,257,5,35,0,0,257,258,3,88,44,0,
		258,259,5,18,0,0,259,262,1,0,0,0,260,262,3,24,12,0,261,247,1,0,0,0,261,
		255,1,0,0,0,261,260,1,0,0,0,262,33,1,0,0,0,263,264,5,55,0,0,264,273,5,
		29,0,0,265,270,3,88,44,0,266,267,5,17,0,0,267,269,3,88,44,0,268,266,1,
		0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,274,1,0,0,0,
		272,270,1,0,0,0,273,265,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,
		5,30,0,0,276,277,5,18,0,0,277,35,1,0,0,0,278,279,3,62,31,0,279,280,5,55,
		0,0,280,281,5,31,0,0,281,282,3,38,19,0,282,283,5,32,0,0,283,284,5,35,0,
		0,284,285,5,60,0,0,285,286,5,18,0,0,286,306,1,0,0,0,287,288,3,62,31,0,
		288,289,5,55,0,0,289,290,5,31,0,0,290,291,3,38,19,0,291,292,5,32,0,0,292,
		293,5,35,0,0,293,294,5,27,0,0,294,295,3,40,20,0,295,296,5,28,0,0,296,297,
		5,18,0,0,297,306,1,0,0,0,298,299,3,62,31,0,299,300,5,55,0,0,300,301,5,
		31,0,0,301,302,3,38,19,0,302,303,5,32,0,0,303,304,5,18,0,0,304,306,1,0,
		0,0,305,278,1,0,0,0,305,287,1,0,0,0,305,298,1,0,0,0,306,37,1,0,0,0,307,
		310,5,56,0,0,308,310,1,0,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,39,1,
		0,0,0,311,316,3,88,44,0,312,313,5,17,0,0,313,315,3,88,44,0,314,312,1,0,
		0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,41,1,0,0,0,318,
		316,1,0,0,0,319,320,5,55,0,0,320,321,5,31,0,0,321,322,3,88,44,0,322,323,
		5,32,0,0,323,43,1,0,0,0,324,325,7,3,0,0,325,326,5,21,0,0,326,327,5,55,
		0,0,327,328,5,18,0,0,328,45,1,0,0,0,329,330,5,55,0,0,330,331,5,35,0,0,
		331,332,5,4,0,0,332,333,5,55,0,0,333,334,5,18,0,0,334,47,1,0,0,0,335,336,
		5,21,0,0,336,337,5,55,0,0,337,338,5,35,0,0,338,339,3,88,44,0,339,340,5,
		18,0,0,340,49,1,0,0,0,341,342,5,38,0,0,342,343,5,29,0,0,343,344,5,59,0,
		0,344,345,5,17,0,0,345,346,5,4,0,0,346,347,5,55,0,0,347,348,5,30,0,0,348,
		349,5,18,0,0,349,51,1,0,0,0,350,351,5,39,0,0,351,352,5,29,0,0,352,357,
		5,60,0,0,353,354,5,17,0,0,354,356,3,96,48,0,355,353,1,0,0,0,356,359,1,
		0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,
		360,361,5,30,0,0,361,371,5,18,0,0,362,367,5,60,0,0,363,364,5,17,0,0,364,
		366,3,96,48,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,
		1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,370,350,1,0,0,0,370,362,1,0,0,
		0,371,53,1,0,0,0,372,373,5,40,0,0,373,374,5,29,0,0,374,375,5,55,0,0,375,
		376,5,30,0,0,376,377,5,18,0,0,377,55,1,0,0,0,378,379,5,41,0,0,379,380,
		5,29,0,0,380,381,5,55,0,0,381,382,5,30,0,0,382,383,5,18,0,0,383,57,1,0,
		0,0,384,385,5,27,0,0,385,390,3,88,44,0,386,387,5,17,0,0,387,389,3,88,44,
		0,388,386,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,
		393,1,0,0,0,392,390,1,0,0,0,393,394,5,28,0,0,394,59,1,0,0,0,395,396,3,
		62,31,0,396,403,5,55,0,0,397,398,5,17,0,0,398,399,3,62,31,0,399,400,5,
		55,0,0,400,402,1,0,0,0,401,397,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,
		403,404,1,0,0,0,404,61,1,0,0,0,405,403,1,0,0,0,406,417,5,11,0,0,407,417,
		5,12,0,0,408,417,5,13,0,0,409,417,5,14,0,0,410,417,5,15,0,0,411,412,5,
		42,0,0,412,417,5,55,0,0,413,414,5,43,0,0,414,417,5,55,0,0,415,417,5,55,
		0,0,416,406,1,0,0,0,416,407,1,0,0,0,416,408,1,0,0,0,416,409,1,0,0,0,416,
		410,1,0,0,0,416,411,1,0,0,0,416,413,1,0,0,0,416,415,1,0,0,0,417,63,1,0,
		0,0,418,423,3,88,44,0,419,420,5,17,0,0,420,422,3,88,44,0,421,419,1,0,0,
		0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,65,1,0,0,0,425,423,
		1,0,0,0,426,427,5,43,0,0,427,428,5,55,0,0,428,429,5,27,0,0,429,430,3,68,
		34,0,430,431,5,28,0,0,431,432,5,18,0,0,432,67,1,0,0,0,433,434,7,3,0,0,
		434,435,5,55,0,0,435,437,5,18,0,0,436,433,1,0,0,0,437,438,1,0,0,0,438,
		436,1,0,0,0,438,439,1,0,0,0,439,69,1,0,0,0,440,441,5,55,0,0,441,442,5,
		36,0,0,442,445,5,55,0,0,443,444,5,35,0,0,444,446,3,88,44,0,445,443,1,0,
		0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,5,18,0,0,448,71,1,0,0,0,449,
		450,5,44,0,0,450,451,5,29,0,0,451,452,3,98,49,0,452,453,5,30,0,0,453,463,
		3,16,8,0,454,455,5,45,0,0,455,456,5,44,0,0,456,457,5,29,0,0,457,458,3,
		98,49,0,458,459,5,30,0,0,459,460,3,16,8,0,460,462,1,0,0,0,461,454,1,0,
		0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,468,1,0,0,0,465,
		463,1,0,0,0,466,467,5,45,0,0,467,469,3,16,8,0,468,466,1,0,0,0,468,469,
		1,0,0,0,469,73,1,0,0,0,470,471,5,46,0,0,471,472,5,29,0,0,472,473,5,55,
		0,0,473,474,5,30,0,0,474,476,5,27,0,0,475,477,3,76,38,0,476,475,1,0,0,
		0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,
		482,3,78,39,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,
		5,28,0,0,484,75,1,0,0,0,485,486,5,47,0,0,486,487,5,56,0,0,487,491,5,5,
		0,0,488,490,3,28,14,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,
		491,492,1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,495,5,48,0,0,495,496,
		5,18,0,0,496,77,1,0,0,0,497,498,5,49,0,0,498,502,5,5,0,0,499,501,3,28,
		14,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,
		505,1,0,0,0,504,502,1,0,0,0,505,506,5,48,0,0,506,507,5,18,0,0,507,79,1,
		0,0,0,508,511,3,82,41,0,509,511,3,84,42,0,510,508,1,0,0,0,510,509,1,0,
		0,0,511,81,1,0,0,0,512,513,5,50,0,0,513,514,5,29,0,0,514,515,3,98,49,0,
		515,516,5,30,0,0,516,517,3,16,8,0,517,83,1,0,0,0,518,519,5,51,0,0,519,
		522,5,29,0,0,520,523,3,32,16,0,521,523,5,18,0,0,522,520,1,0,0,0,522,521,
		1,0,0,0,523,525,1,0,0,0,524,526,3,98,49,0,525,524,1,0,0,0,525,526,1,0,
		0,0,526,527,1,0,0,0,527,530,5,18,0,0,528,531,3,32,16,0,529,531,3,88,44,
		0,530,528,1,0,0,0,530,529,1,0,0,0,531,532,1,0,0,0,532,533,5,30,0,0,533,
		534,3,16,8,0,534,85,1,0,0,0,535,536,5,52,0,0,536,537,3,16,8,0,537,538,
		5,50,0,0,538,539,5,29,0,0,539,540,3,98,49,0,540,541,5,30,0,0,541,542,5,
		18,0,0,542,87,1,0,0,0,543,556,3,58,29,0,544,549,3,92,46,0,545,546,7,4,
		0,0,546,548,3,92,46,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,
		549,550,1,0,0,0,550,556,1,0,0,0,551,549,1,0,0,0,552,556,3,42,21,0,553,
		556,3,34,17,0,554,556,3,26,13,0,555,543,1,0,0,0,555,544,1,0,0,0,555,552,
		1,0,0,0,555,553,1,0,0,0,555,554,1,0,0,0,556,89,1,0,0,0,557,558,5,55,0,
		0,558,559,5,31,0,0,559,560,3,88,44,0,560,561,5,32,0,0,561,562,5,35,0,0,
		562,563,3,88,44,0,563,91,1,0,0,0,564,569,3,94,47,0,565,566,7,5,0,0,566,
		568,3,94,47,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,
		1,0,0,0,570,93,1,0,0,0,571,569,1,0,0,0,572,573,5,26,0,0,573,591,3,94,47,
		0,574,575,5,29,0,0,575,576,3,88,44,0,576,577,5,30,0,0,577,591,1,0,0,0,
		578,591,3,42,21,0,579,591,3,26,13,0,580,591,3,24,12,0,581,591,5,56,0,0,
		582,591,5,57,0,0,583,591,5,55,0,0,584,591,5,60,0,0,585,591,5,58,0,0,586,
		587,5,55,0,0,587,591,5,33,0,0,588,589,5,55,0,0,589,591,5,34,0,0,590,572,
		1,0,0,0,590,574,1,0,0,0,590,578,1,0,0,0,590,579,1,0,0,0,590,580,1,0,0,
		0,590,581,1,0,0,0,590,582,1,0,0,0,590,583,1,0,0,0,590,584,1,0,0,0,590,
		585,1,0,0,0,590,586,1,0,0,0,590,588,1,0,0,0,591,95,1,0,0,0,592,597,3,88,
		44,0,593,597,3,98,49,0,594,597,3,42,21,0,595,597,3,26,13,0,596,592,1,0,
		0,0,596,593,1,0,0,0,596,594,1,0,0,0,596,595,1,0,0,0,597,97,1,0,0,0,598,
		599,6,49,-1,0,599,600,5,29,0,0,600,601,3,98,49,0,601,602,5,30,0,0,602,
		611,1,0,0,0,603,604,5,26,0,0,604,611,3,98,49,4,605,608,3,88,44,0,606,607,
		5,7,0,0,607,609,3,88,44,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,1,0,
		0,0,610,598,1,0,0,0,610,603,1,0,0,0,610,605,1,0,0,0,611,620,1,0,0,0,612,
		613,10,3,0,0,613,614,5,24,0,0,614,619,3,98,49,4,615,616,10,2,0,0,616,617,
		5,25,0,0,617,619,3,98,49,3,618,612,1,0,0,0,618,615,1,0,0,0,619,622,1,0,
		0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,99,1,0,0,0,622,620,1,0,0,0,623,
		624,5,29,0,0,624,625,7,3,0,0,625,626,5,30,0,0,626,627,5,55,0,0,627,628,
		5,18,0,0,628,101,1,0,0,0,629,630,5,53,0,0,630,631,5,29,0,0,631,632,5,55,
		0,0,632,633,5,30,0,0,633,634,5,18,0,0,634,103,1,0,0,0,635,636,3,98,49,
		0,636,637,5,6,0,0,637,638,3,88,44,0,638,639,5,5,0,0,639,640,3,88,44,0,
		640,641,5,18,0,0,641,105,1,0,0,0,642,644,5,37,0,0,643,645,3,88,44,0,644,
		643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,5,18,0,0,647,107,1,
		0,0,0,49,115,120,122,139,141,149,158,167,176,187,198,207,243,251,261,270,
		273,305,309,316,357,367,370,390,403,416,423,438,445,463,468,478,481,491,
		502,510,522,525,530,549,555,569,590,596,608,610,618,620,644
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
