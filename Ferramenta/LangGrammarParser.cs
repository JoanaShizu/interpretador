//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LangGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INCLUDE=6, DEFINE=7, EOL=8, LIB=9, 
		COMMENTLINE=10, COMMENTBLOCK=11, INT=12, FLOAT=13, CHAR=14, DOUBLE=15, 
		VOID=16, MAIN=17, VAR=18, NUM=19, STR=20, FORMAT=21, PLUS=22, MINUS=23, 
		MULT=24, DIV=25, MOD=26, AND=27, OR=28, NOT=29, RELOP=30, SOMA=31, SUB=32, 
		ASSIGN=33, DOT=34, OPEN_PAREN=35, CLOSE_PAREN=36, OPEN_BRACE=37, CLOSE_BRACE=38, 
		VIR=39, RETURN=40, SCAN=41, PRINT=42, GETS=43, PUTS=44, STRUCT=45, UNION=46, 
		IF=47, ELSE=48, SWITCH=49, CASE=50, BREAK=51, DEFAULT=52, WHILE=53, FOR=54, 
		DO=55, TYPEOF=56, WS=57;
	public const int
		RULE_programa = 0, RULE_cabecalho = 1, RULE_includeDecl = 2, RULE_defineDecl = 3, 
		RULE_corpo = 4, RULE_mainFunction = 5, RULE_bloco = 6, RULE_linhas = 7, 
		RULE_comentario = 8, RULE_atrib = 9, RULE_arrayDecl = 10, RULE_elementosArray = 11, 
		RULE_pointerDecl = 12, RULE_pointerAssign = 13, RULE_pointerDereference = 14, 
		RULE_in = 15, RULE_out = 16, RULE_getsStmt = 17, RULE_putsStmt = 18, RULE_functionDecl = 19, 
		RULE_functionCall = 20, RULE_parametros = 21, RULE_argumentos = 22, RULE_structDecl = 23, 
		RULE_structFields = 24, RULE_unionDecl = 25, RULE_unionFields = 26, RULE_structAccess = 27, 
		RULE_unionAccess = 28, RULE_decisionFunc = 29, RULE_switchCase = 30, RULE_caseBlock = 31, 
		RULE_defaultBlock = 32, RULE_loopFunc = 33, RULE_doWhileLoop = 34, RULE_expression = 35, 
		RULE_terminais = 36, RULE_fator = 37, RULE_exprbloco = 38, RULE_casting = 39, 
		RULE_typeof = 40, RULE_ternary = 41, RULE_returnStmt = 42;
	public static readonly string[] ruleNames = {
		"programa", "cabecalho", "includeDecl", "defineDecl", "corpo", "mainFunction", 
		"bloco", "linhas", "comentario", "atrib", "arrayDecl", "elementosArray", 
		"pointerDecl", "pointerAssign", "pointerDereference", "in", "out", "getsStmt", 
		"putsStmt", "functionDecl", "functionCall", "parametros", "argumentos", 
		"structDecl", "structFields", "unionDecl", "unionFields", "structAccess", 
		"unionAccess", "decisionFunc", "switchCase", "caseBlock", "defaultBlock", 
		"loopFunc", "doWhileLoop", "expression", "terminais", "fator", "exprbloco", 
		"casting", "typeof", "ternary", "returnStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'&'", "':'", "'?'", "'#include'", "'#define'", "';'", 
		null, null, null, "'int'", "'float'", "'char'", "'double'", "'void'", 
		"'main'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", 
		"'||'", "'!'", null, "'++'", "'--'", "'='", "'.'", "'('", "')'", "'{'", 
		"'}'", "','", "'return'", "'scanf'", "'printf'", "'gets'", "'puts'", "'struct'", 
		"'union'", "'if'", "'else'", "'switch'", "'case'", "'break'", "'default'", 
		"'while'", "'for'", "'do'", "'typeof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INCLUDE", "DEFINE", "EOL", "LIB", 
		"COMMENTLINE", "COMMENTBLOCK", "INT", "FLOAT", "CHAR", "DOUBLE", "VOID", 
		"MAIN", "VAR", "NUM", "STR", "FORMAT", "PLUS", "MINUS", "MULT", "DIV", 
		"MOD", "AND", "OR", "NOT", "RELOP", "SOMA", "SUB", "ASSIGN", "DOT", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "VIR", "RETURN", "SCAN", "PRINT", 
		"GETS", "PUTS", "STRUCT", "UNION", "IF", "ELSE", "SWITCH", "CASE", "BREAK", 
		"DEFAULT", "WHILE", "FOR", "DO", "TYPEOF", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CabecalhoContext cabecalho() {
			return GetRuleContext<CabecalhoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CorpoContext corpo() {
			return GetRuleContext<CorpoContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			cabecalho();
			State = 87;
			corpo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CabecalhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncludeDeclContext[] includeDecl() {
			return GetRuleContexts<IncludeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeDeclContext includeDecl(int i) {
			return GetRuleContext<IncludeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineDeclContext[] defineDecl() {
			return GetRuleContexts<DefineDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineDeclContext defineDecl(int i) {
			return GetRuleContext<DefineDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext[] comentario() {
			return GetRuleContexts<ComentarioContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario(int i) {
			return GetRuleContext<ComentarioContext>(i);
		}
		public CabecalhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cabecalho; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCabecalho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCabecalho(this);
		}
	}

	[RuleVersion(0)]
	public CabecalhoContext cabecalho() {
		CabecalhoContext _localctx = new CabecalhoContext(Context, State);
		EnterRule(_localctx, 2, RULE_cabecalho);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3264L) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCLUDE:
					{
					State = 89;
					includeDecl();
					}
					break;
				case DEFINE:
					{
					State = 90;
					defineDecl();
					}
					break;
				case COMMENTLINE:
				case COMMENTBLOCK:
					{
					State = 91;
					comentario();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(LangGrammarParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIB() { return GetToken(LangGrammarParser.LIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		public IncludeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeDecl(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDeclContext includeDecl() {
		IncludeDeclContext _localctx = new IncludeDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_includeDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(INCLUDE);
			State = 98;
			Match(LIB);
			State = 99;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(LangGrammarParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefineDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDefineDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDefineDecl(this);
		}
	}

	[RuleVersion(0)]
	public DefineDeclContext defineDecl() {
		DefineDeclContext _localctx = new DefineDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(DEFINE);
			State = 102;
			Match(VAR);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34361589760L) != 0)) {
				{
				State = 103;
				expression();
				}
			}

			State = 106;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CorpoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainFunctionContext mainFunction() {
			return GetRuleContext<MainFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext[] structDecl() {
			return GetRuleContexts<StructDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl(int i) {
			return GetRuleContext<StructDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclContext[] unionDecl() {
			return GetRuleContexts<UnionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclContext unionDecl(int i) {
			return GetRuleContext<UnionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext[] comentario() {
			return GetRuleContexts<ComentarioContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario(int i) {
			return GetRuleContext<ComentarioContext>(i);
		}
		public CorpoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_corpo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCorpo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCorpo(this);
		}
	}

	[RuleVersion(0)]
	public CorpoContext corpo() {
		CorpoContext _localctx = new CorpoContext(Context, State);
		EnterRule(_localctx, 8, RULE_corpo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			mainFunction();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 105553116396544L) != 0)) {
				{
				State = 113;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case FLOAT:
				case CHAR:
				case DOUBLE:
				case VOID:
					{
					State = 109;
					functionDecl();
					}
					break;
				case STRUCT:
					{
					State = 110;
					structDecl();
					}
					break;
				case UNION:
					{
					State = 111;
					unionDecl();
					}
					break;
				case COMMENTLINE:
				case COMMENTBLOCK:
					{
					State = 112;
					comentario();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(LangGrammarParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public MainFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterMainFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitMainFunction(this);
		}
	}

	[RuleVersion(0)]
	public MainFunctionContext mainFunction() {
		MainFunctionContext _localctx = new MainFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_mainFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(INT);
			State = 119;
			Match(MAIN);
			State = 120;
			Match(OPEN_PAREN);
			State = 121;
			Match(VOID);
			State = 122;
			Match(CLOSE_PAREN);
			State = 123;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LangGrammarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LangGrammarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 12, RULE_bloco);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(OPEN_BRACE);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135845796038704128L) != 0)) {
				{
				{
				State = 126;
				linhas();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinhasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComentarioContext comentario() {
			return GetRuleContext<ComentarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclContext arrayDecl() {
			return GetRuleContext<ArrayDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclContext pointerDecl() {
			return GetRuleContext<PointerDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerAssignContext pointerAssign() {
			return GetRuleContext<PointerAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDereferenceContext pointerDereference() {
			return GetRuleContext<PointerDereferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructAccessContext structAccess() {
			return GetRuleContext<StructAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionAccessContext unionAccess() {
			return GetRuleContext<UnionAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InContext @in() {
			return GetRuleContext<InContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutContext @out() {
			return GetRuleContext<OutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetsStmtContext getsStmt() {
			return GetRuleContext<GetsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PutsStmtContext putsStmt() {
			return GetRuleContext<PutsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecisionFuncContext decisionFunc() {
			return GetRuleContext<DecisionFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext switchCase() {
			return GetRuleContext<SwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopFuncContext loopFunc() {
			return GetRuleContext<LoopFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileLoopContext doWhileLoop() {
			return GetRuleContext<DoWhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastingContext casting() {
			return GetRuleContext<CastingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeofContext @typeof() {
			return GetRuleContext<TypeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryContext ternary() {
			return GetRuleContext<TernaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public LinhasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linhas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterLinhas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitLinhas(this);
		}
	}

	[RuleVersion(0)]
	public LinhasContext linhas() {
		LinhasContext _localctx = new LinhasContext(Context, State);
		EnterRule(_localctx, 14, RULE_linhas);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				comentario();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				atrib();
				State = 136;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				arrayDecl();
				State = 139;
				Match(EOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 141;
				pointerDecl();
				State = 142;
				Match(EOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144;
				pointerAssign();
				State = 145;
				Match(EOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 147;
				pointerDereference();
				State = 148;
				Match(EOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 150;
				functionCall();
				State = 151;
				Match(EOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 153;
				structAccess();
				State = 154;
				Match(EOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 156;
				unionAccess();
				State = 157;
				Match(EOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 159;
				@in();
				State = 160;
				Match(EOL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 162;
				@out();
				State = 163;
				Match(EOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 165;
				getsStmt();
				State = 166;
				Match(EOL);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 168;
				putsStmt();
				State = 169;
				Match(EOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 171;
				decisionFunc();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 172;
				switchCase();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 173;
				loopFunc();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 174;
				doWhileLoop();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 175;
				casting();
				State = 176;
				Match(EOL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 178;
				@typeof();
				State = 179;
				Match(EOL);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 181;
				ternary();
				State = 182;
				Match(EOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 184;
				returnStmt();
				State = 185;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComentarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTLINE() { return GetToken(LangGrammarParser.COMMENTLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTBLOCK() { return GetToken(LangGrammarParser.COMMENTBLOCK, 0); }
		public ComentarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comentario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterComentario(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitComentario(this);
		}
	}

	[RuleVersion(0)]
	public ComentarioContext comentario() {
		ComentarioContext _localctx = new ComentarioContext(Context, State);
		EnterRule(_localctx, 16, RULE_comentario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMENTLINE || _la==COMMENTBLOCK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitAtrib(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 18, RULE_atrib);
		int _la;
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 192;
				Match(VAR);
				State = 193;
				Match(ASSIGN);
				State = 194;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 196;
				Match(VAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197;
				Match(VAR);
				State = 198;
				Match(ASSIGN);
				State = 199;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LangGrammarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementosArrayContext elementosArray() {
			return GetRuleContext<ElementosArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LangGrammarParser.CLOSE_BRACE, 0); }
		public ArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclContext arrayDecl() {
		ArrayDeclContext _localctx = new ArrayDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_arrayDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 203;
			Match(VAR);
			State = 204;
			Match(T__0);
			State = 205;
			Match(NUM);
			State = 206;
			Match(T__1);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 207;
				Match(ASSIGN);
				State = 208;
				Match(OPEN_BRACE);
				State = 209;
				elementosArray();
				State = 210;
				Match(CLOSE_BRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementosArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(LangGrammarParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(LangGrammarParser.VIR, i);
		}
		public ElementosArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementosArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterElementosArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitElementosArray(this);
		}
	}

	[RuleVersion(0)]
	public ElementosArrayContext elementosArray() {
		ElementosArrayContext _localctx = new ElementosArrayContext(Context, State);
		EnterRule(_localctx, 22, RULE_elementosArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			expression();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIR) {
				{
				{
				State = 215;
				Match(VIR);
				State = 216;
				expression();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public PointerDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerDecl(this);
		}
	}

	[RuleVersion(0)]
	public PointerDeclContext pointerDecl() {
		PointerDeclContext _localctx = new PointerDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_pointerDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 223;
			Match(MULT);
			State = 224;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		public PointerAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerAssign(this);
		}
	}

	[RuleVersion(0)]
	public PointerAssignContext pointerAssign() {
		PointerAssignContext _localctx = new PointerAssignContext(Context, State);
		EnterRule(_localctx, 26, RULE_pointerAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(VAR);
			State = 227;
			Match(ASSIGN);
			State = 228;
			Match(T__2);
			State = 229;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDereferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangGrammarParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PointerDereferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDereference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointerDereference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointerDereference(this);
		}
	}

	[RuleVersion(0)]
	public PointerDereferenceContext pointerDereference() {
		PointerDereferenceContext _localctx = new PointerDereferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_pointerDereference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(MULT);
			State = 232;
			Match(VAR);
			State = 233;
			Match(ASSIGN);
			State = 234;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCAN() { return GetToken(LangGrammarParser.SCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(LangGrammarParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR() { return GetToken(LangGrammarParser.VIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		public InContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitIn(this);
		}
	}

	[RuleVersion(0)]
	public InContext @in() {
		InContext _localctx = new InContext(Context, State);
		EnterRule(_localctx, 30, RULE_in);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(SCAN);
			State = 237;
			Match(OPEN_PAREN);
			State = 238;
			Match(FORMAT);
			State = 239;
			Match(VIR);
			State = 240;
			Match(T__2);
			State = 241;
			Match(VAR);
			State = 242;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(LangGrammarParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(LangGrammarParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(LangGrammarParser.VIR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitOut(this);
		}
	}

	[RuleVersion(0)]
	public OutContext @out() {
		OutContext _localctx = new OutContext(Context, State);
		EnterRule(_localctx, 32, RULE_out);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(PRINT);
			State = 245;
			Match(OPEN_PAREN);
			State = 246;
			Match(STR);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIR) {
				{
				{
				State = 247;
				Match(VIR);
				State = 248;
				expression();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254;
			Match(CLOSE_PAREN);
			State = 255;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETS() { return GetToken(LangGrammarParser.GETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		public GetsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterGetsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitGetsStmt(this);
		}
	}

	[RuleVersion(0)]
	public GetsStmtContext getsStmt() {
		GetsStmtContext _localctx = new GetsStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_getsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(GETS);
			State = 258;
			Match(OPEN_PAREN);
			State = 259;
			Match(VAR);
			State = 260;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUTS() { return GetToken(LangGrammarParser.PUTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		public PutsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPutsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPutsStmt(this);
		}
	}

	[RuleVersion(0)]
	public PutsStmtContext putsStmt() {
		PutsStmtContext _localctx = new PutsStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_putsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(PUTS);
			State = 263;
			Match(OPEN_PAREN);
			State = 264;
			Match(VAR);
			State = 265;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 268;
			Match(VAR);
			State = 269;
			Match(OPEN_PAREN);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) {
				{
				State = 270;
				parametros();
				}
			}

			State = 273;
			Match(CLOSE_PAREN);
			State = 274;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentosContext argumentos() {
			return GetRuleContext<ArgumentosContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(VAR);
			State = 277;
			Match(OPEN_PAREN);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34361589760L) != 0)) {
				{
				State = 278;
				argumentos();
				}
			}

			State = 281;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(LangGrammarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(LangGrammarParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(LangGrammarParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(LangGrammarParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(LangGrammarParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(LangGrammarParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE() { return GetTokens(LangGrammarParser.DOUBLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE(int i) {
			return GetToken(LangGrammarParser.DOUBLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VOID() { return GetTokens(LangGrammarParser.VOID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID(int i) {
			return GetToken(LangGrammarParser.VOID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(LangGrammarParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(LangGrammarParser.VIR, i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 42, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 284;
			Match(VAR);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIR) {
				{
				{
				State = 285;
				Match(VIR);
				State = 286;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 287;
				Match(VAR);
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(LangGrammarParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(LangGrammarParser.VIR, i);
		}
		public ArgumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentos(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentosContext argumentos() {
		ArgumentosContext _localctx = new ArgumentosContext(Context, State);
		EnterRule(_localctx, 44, RULE_argumentos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			expression();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIR) {
				{
				{
				State = 294;
				Match(VIR);
				State = 295;
				expression();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LangGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LangGrammarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldsContext structFields() {
			return GetRuleContext<StructFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LangGrammarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 46, RULE_structDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(STRUCT);
			State = 302;
			Match(VAR);
			State = 303;
			Match(OPEN_BRACE);
			State = 304;
			structFields();
			State = 305;
			Match(CLOSE_BRACE);
			State = 306;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangGrammarParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangGrammarParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(LangGrammarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(LangGrammarParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(LangGrammarParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(LangGrammarParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(LangGrammarParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(LangGrammarParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE() { return GetTokens(LangGrammarParser.DOUBLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE(int i) {
			return GetToken(LangGrammarParser.DOUBLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VOID() { return GetTokens(LangGrammarParser.VOID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID(int i) {
			return GetToken(LangGrammarParser.VOID, i);
		}
		public StructFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructFields(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldsContext structFields() {
		StructFieldsContext _localctx = new StructFieldsContext(Context, State);
		EnterRule(_localctx, 48, RULE_structFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 308;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 309;
				Match(VAR);
				State = 310;
				Match(EOL);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(LangGrammarParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LangGrammarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnionFieldsContext unionFields() {
			return GetRuleContext<UnionFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LangGrammarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		public UnionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionDecl(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclContext unionDecl() {
		UnionDeclContext _localctx = new UnionDeclContext(Context, State);
		EnterRule(_localctx, 50, RULE_unionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(UNION);
			State = 316;
			Match(VAR);
			State = 317;
			Match(OPEN_BRACE);
			State = 318;
			unionFields();
			State = 319;
			Match(CLOSE_BRACE);
			State = 320;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangGrammarParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangGrammarParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(LangGrammarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(LangGrammarParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLOAT() { return GetTokens(LangGrammarParser.FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT(int i) {
			return GetToken(LangGrammarParser.FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(LangGrammarParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(LangGrammarParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE() { return GetTokens(LangGrammarParser.DOUBLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE(int i) {
			return GetToken(LangGrammarParser.DOUBLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VOID() { return GetTokens(LangGrammarParser.VOID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID(int i) {
			return GetToken(LangGrammarParser.VOID, i);
		}
		public UnionFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionFields(this);
		}
	}

	[RuleVersion(0)]
	public UnionFieldsContext unionFields() {
		UnionFieldsContext _localctx = new UnionFieldsContext(Context, State);
		EnterRule(_localctx, 52, RULE_unionFields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 322;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 323;
				Match(VAR);
				State = 324;
				Match(EOL);
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LangGrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StructAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStructAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStructAccess(this);
		}
	}

	[RuleVersion(0)]
	public StructAccessContext structAccess() {
		StructAccessContext _localctx = new StructAccessContext(Context, State);
		EnterRule(_localctx, 54, RULE_structAccess);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				Match(VAR);
				State = 330;
				Match(DOT);
				State = 331;
				Match(VAR);
				State = 332;
				Match(ASSIGN);
				State = 333;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(VAR);
				State = 335;
				Match(DOT);
				State = 336;
				Match(VAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LangGrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LangGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnionAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterUnionAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitUnionAccess(this);
		}
	}

	[RuleVersion(0)]
	public UnionAccessContext unionAccess() {
		UnionAccessContext _localctx = new UnionAccessContext(Context, State);
		EnterRule(_localctx, 56, RULE_unionAccess);
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				Match(VAR);
				State = 340;
				Match(DOT);
				State = 341;
				Match(VAR);
				State = 342;
				Match(ASSIGN);
				State = 343;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				Match(VAR);
				State = 345;
				Match(DOT);
				State = 346;
				Match(VAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecisionFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext[] bloco() {
			return GetRuleContexts<BlocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco(int i) {
			return GetRuleContext<BlocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LangGrammarParser.ELSE, 0); }
		public DecisionFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decisionFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDecisionFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDecisionFunc(this);
		}
	}

	[RuleVersion(0)]
	public DecisionFuncContext decisionFunc() {
		DecisionFuncContext _localctx = new DecisionFuncContext(Context, State);
		EnterRule(_localctx, 58, RULE_decisionFunc);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				Match(IF);
				State = 350;
				Match(OPEN_PAREN);
				State = 351;
				exprbloco(0);
				State = 352;
				Match(CLOSE_PAREN);
				State = 353;
				bloco();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				Match(IF);
				State = 356;
				Match(OPEN_PAREN);
				State = 357;
				exprbloco(0);
				State = 358;
				Match(CLOSE_PAREN);
				State = 359;
				bloco();
				State = 360;
				Match(ELSE);
				State = 361;
				bloco();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LangGrammarParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LangGrammarParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LangGrammarParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(SWITCH);
			State = 366;
			Match(OPEN_PAREN);
			State = 367;
			Match(VAR);
			State = 368;
			Match(CLOSE_PAREN);
			State = 369;
			Match(OPEN_BRACE);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 370;
				caseBlock();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 375;
				defaultBlock();
				}
			}

			State = 378;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LangGrammarParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LangGrammarParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(CASE);
			State = 381;
			Match(NUM);
			State = 382;
			Match(T__3);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135845796038704128L) != 0)) {
				{
				{
				State = 383;
				linhas();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(BREAK);
			State = 390;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LangGrammarParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LangGrammarParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext[] linhas() {
			return GetRuleContexts<LinhasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinhasContext linhas(int i) {
			return GetRuleContext<LinhasContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(DEFAULT);
			State = 393;
			Match(T__3);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135845796038704128L) != 0)) {
				{
				{
				State = 394;
				linhas();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 400;
			Match(BREAK);
			State = 401;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LangGrammarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext[] atrib() {
			return GetRuleContexts<AtribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib(int i) {
			return GetRuleContext<AtribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangGrammarParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangGrammarParser.EOL, i);
		}
		public LoopFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterLoopFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitLoopFunc(this);
		}
	}

	[RuleVersion(0)]
	public LoopFuncContext loopFunc() {
		LoopFuncContext _localctx = new LoopFuncContext(Context, State);
		EnterRule(_localctx, 66, RULE_loopFunc);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				Match(WHILE);
				State = 404;
				Match(OPEN_PAREN);
				State = 405;
				exprbloco(0);
				State = 406;
				Match(CLOSE_PAREN);
				State = 407;
				bloco();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				Match(FOR);
				State = 410;
				Match(OPEN_PAREN);
				State = 411;
				atrib();
				State = 412;
				Match(EOL);
				State = 413;
				exprbloco(0);
				State = 414;
				Match(EOL);
				State = 415;
				atrib();
				State = 416;
				Match(CLOSE_PAREN);
				State = 417;
				bloco();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LangGrammarParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		public DoWhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDoWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDoWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileLoopContext doWhileLoop() {
		DoWhileLoopContext _localctx = new DoWhileLoopContext(Context, State);
		EnterRule(_localctx, 68, RULE_doWhileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(DO);
			State = 422;
			bloco();
			State = 423;
			Match(WHILE);
			State = 424;
			Match(OPEN_PAREN);
			State = 425;
			exprbloco(0);
			State = 426;
			Match(CLOSE_PAREN);
			State = 427;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminaisContext[] terminais() {
			return GetRuleContexts<TerminaisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminaisContext terminais(int i) {
			return GetRuleContext<TerminaisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(LangGrammarParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(LangGrammarParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(LangGrammarParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(LangGrammarParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			terminais();
			State = 436;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 434;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PLUS:
						{
						State = 430;
						Match(PLUS);
						State = 431;
						terminais();
						}
						break;
					case MINUS:
						{
						State = 432;
						Match(MINUS);
						State = 433;
						terminais();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 438;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminaisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext[] fator() {
			return GetRuleContexts<FatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator(int i) {
			return GetRuleContext<FatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(LangGrammarParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(LangGrammarParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(LangGrammarParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(LangGrammarParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(LangGrammarParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(LangGrammarParser.MOD, i);
		}
		public TerminaisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminais; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTerminais(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTerminais(this);
		}
	}

	[RuleVersion(0)]
	public TerminaisContext terminais() {
		TerminaisContext _localctx = new TerminaisContext(Context, State);
		EnterRule(_localctx, 72, RULE_terminais);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			fator();
			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 446;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case MULT:
						{
						State = 440;
						Match(MULT);
						State = 441;
						fator();
						}
						break;
					case DIV:
						{
						State = 442;
						Match(DIV);
						State = 443;
						fator();
						}
						break;
					case MOD:
						{
						State = 444;
						Match(MOD);
						State = 445;
						fator();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOMA() { return GetTokens(LangGrammarParser.SOMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOMA(int i) {
			return GetToken(LangGrammarParser.SOMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB() { return GetTokens(LangGrammarParser.SUB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB(int i) {
			return GetToken(LangGrammarParser.SUB, i);
		}
		public FatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFator(this);
		}
	}

	[RuleVersion(0)]
	public FatorContext fator() {
		FatorContext _localctx = new FatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_fator);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				Match(OPEN_PAREN);
				State = 452;
				expression();
				State = 453;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				Match(NUM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456;
				Match(VAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 457;
				Match(STR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 458;
				Match(CHAR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 459;
				Match(VAR);
				State = 460;
				Match(SOMA);
				State = 461;
				Match(SOMA);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 462;
				Match(VAR);
				State = 463;
				Match(SUB);
				State = 464;
				Match(SUB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprblocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(LangGrammarParser.RELOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LangGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext[] exprbloco() {
			return GetRuleContexts<ExprblocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco(int i) {
			return GetRuleContext<ExprblocoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LangGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LangGrammarParser.OR, 0); }
		public ExprblocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprbloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExprbloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExprbloco(this);
		}
	}

	[RuleVersion(0)]
	public ExprblocoContext exprbloco() {
		return exprbloco(0);
	}

	private ExprblocoContext exprbloco(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprblocoContext _localctx = new ExprblocoContext(Context, _parentState);
		ExprblocoContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_exprbloco, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case VAR:
			case NUM:
			case STR:
			case OPEN_PAREN:
				{
				State = 468;
				expression();
				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 469;
					Match(RELOP);
					State = 470;
					expression();
					}
					break;
				}
				}
				break;
			case NOT:
				{
				State = 473;
				Match(NOT);
				State = 474;
				exprbloco(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 483;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new ExprblocoContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exprbloco);
						State = 477;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 478;
						Match(AND);
						State = 479;
						exprbloco(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprblocoContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exprbloco);
						State = 480;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 481;
						Match(OR);
						State = 482;
						exprbloco(3);
						}
						break;
					}
					} 
				}
				State = 487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LangGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangGrammarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LangGrammarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(LangGrammarParser.VOID, 0); }
		public CastingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCasting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCasting(this);
		}
	}

	[RuleVersion(0)]
	public CastingContext casting() {
		CastingContext _localctx = new CastingContext(Context, State);
		EnterRule(_localctx, 78, RULE_casting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(OPEN_PAREN);
			State = 489;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 490;
			Match(CLOSE_PAREN);
			State = 491;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(LangGrammarParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LangGrammarParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LangGrammarParser.CLOSE_PAREN, 0); }
		public TypeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeof(this);
		}
	}

	[RuleVersion(0)]
	public TypeofContext @typeof() {
		TypeofContext _localctx = new TypeofContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(TYPEOF);
			State = 494;
			Match(OPEN_PAREN);
			State = 495;
			Match(VAR);
			State = 496;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprblocoContext exprbloco() {
			return GetRuleContext<ExprblocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext[] bloco() {
			return GetRuleContexts<BlocoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco(int i) {
			return GetRuleContext<BlocoContext>(i);
		}
		public TernaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
	}

	[RuleVersion(0)]
	public TernaryContext ternary() {
		TernaryContext _localctx = new TernaryContext(Context, State);
		EnterRule(_localctx, 82, RULE_ternary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			exprbloco(0);
			State = 499;
			Match(T__4);
			State = 500;
			bloco();
			State = 501;
			Match(T__3);
			State = 502;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LangGrammarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_returnStmt);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				Match(RETURN);
				State = 505;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 38: return exprbloco_sempred((ExprblocoContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exprbloco_sempred(ExprblocoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,510,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,0,1,1,1,1,1,1,5,1,93,8,1,10,1,12,1,96,9,1,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,3,3,105,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,114,8,4,10,4,12,
		4,117,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,6,128,8,6,10,6,12,6,131,
		9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,188,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		3,9,201,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,213,
		8,10,1,11,1,11,1,11,5,11,218,8,11,10,11,12,11,221,9,11,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,5,16,250,8,16,10,16,
		12,16,253,9,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,3,19,272,8,19,1,19,1,19,1,19,1,20,1,20,1,
		20,3,20,280,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,5,21,289,8,21,10,21,
		12,21,292,9,21,1,22,1,22,1,22,5,22,297,8,22,10,22,12,22,300,9,22,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,4,24,312,8,24,11,24,12,24,
		313,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,4,26,326,8,26,11,
		26,12,26,327,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,338,8,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,348,8,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,364,8,29,1,30,1,30,
		1,30,1,30,1,30,1,30,4,30,372,8,30,11,30,12,30,373,1,30,3,30,377,8,30,1,
		30,1,30,1,31,1,31,1,31,1,31,5,31,385,8,31,10,31,12,31,388,9,31,1,31,1,
		31,1,31,1,32,1,32,1,32,5,32,396,8,32,10,32,12,32,399,9,32,1,32,1,32,1,
		32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,3,33,420,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,
		1,35,1,35,1,35,1,35,5,35,435,8,35,10,35,12,35,438,9,35,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,5,36,447,8,36,10,36,12,36,450,9,36,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,466,8,37,1,
		38,1,38,1,38,1,38,3,38,472,8,38,1,38,1,38,3,38,476,8,38,1,38,1,38,1,38,
		1,38,1,38,1,38,5,38,484,8,38,10,38,12,38,487,9,38,1,39,1,39,1,39,1,39,
		1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,
		1,42,3,42,508,8,42,1,42,0,1,76,43,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,0,2,1,0,10,11,1,0,12,16,530,0,86,1,0,0,0,2,94,1,0,0,0,4,
		97,1,0,0,0,6,101,1,0,0,0,8,108,1,0,0,0,10,118,1,0,0,0,12,125,1,0,0,0,14,
		187,1,0,0,0,16,189,1,0,0,0,18,200,1,0,0,0,20,202,1,0,0,0,22,214,1,0,0,
		0,24,222,1,0,0,0,26,226,1,0,0,0,28,231,1,0,0,0,30,236,1,0,0,0,32,244,1,
		0,0,0,34,257,1,0,0,0,36,262,1,0,0,0,38,267,1,0,0,0,40,276,1,0,0,0,42,283,
		1,0,0,0,44,293,1,0,0,0,46,301,1,0,0,0,48,311,1,0,0,0,50,315,1,0,0,0,52,
		325,1,0,0,0,54,337,1,0,0,0,56,347,1,0,0,0,58,363,1,0,0,0,60,365,1,0,0,
		0,62,380,1,0,0,0,64,392,1,0,0,0,66,419,1,0,0,0,68,421,1,0,0,0,70,429,1,
		0,0,0,72,439,1,0,0,0,74,465,1,0,0,0,76,475,1,0,0,0,78,488,1,0,0,0,80,493,
		1,0,0,0,82,498,1,0,0,0,84,507,1,0,0,0,86,87,3,2,1,0,87,88,3,8,4,0,88,1,
		1,0,0,0,89,93,3,4,2,0,90,93,3,6,3,0,91,93,3,16,8,0,92,89,1,0,0,0,92,90,
		1,0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,3,1,
		0,0,0,96,94,1,0,0,0,97,98,5,6,0,0,98,99,5,9,0,0,99,100,5,8,0,0,100,5,1,
		0,0,0,101,102,5,7,0,0,102,104,5,18,0,0,103,105,3,70,35,0,104,103,1,0,0,
		0,104,105,1,0,0,0,105,106,1,0,0,0,106,107,5,8,0,0,107,7,1,0,0,0,108,115,
		3,10,5,0,109,114,3,38,19,0,110,114,3,46,23,0,111,114,3,50,25,0,112,114,
		3,16,8,0,113,109,1,0,0,0,113,110,1,0,0,0,113,111,1,0,0,0,113,112,1,0,0,
		0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,9,1,0,0,0,117,115,
		1,0,0,0,118,119,5,12,0,0,119,120,5,17,0,0,120,121,5,35,0,0,121,122,5,16,
		0,0,122,123,5,36,0,0,123,124,3,12,6,0,124,11,1,0,0,0,125,129,5,37,0,0,
		126,128,3,14,7,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
		1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,38,0,0,133,13,1,0,0,
		0,134,188,3,16,8,0,135,136,3,18,9,0,136,137,5,8,0,0,137,188,1,0,0,0,138,
		139,3,20,10,0,139,140,5,8,0,0,140,188,1,0,0,0,141,142,3,24,12,0,142,143,
		5,8,0,0,143,188,1,0,0,0,144,145,3,26,13,0,145,146,5,8,0,0,146,188,1,0,
		0,0,147,148,3,28,14,0,148,149,5,8,0,0,149,188,1,0,0,0,150,151,3,40,20,
		0,151,152,5,8,0,0,152,188,1,0,0,0,153,154,3,54,27,0,154,155,5,8,0,0,155,
		188,1,0,0,0,156,157,3,56,28,0,157,158,5,8,0,0,158,188,1,0,0,0,159,160,
		3,30,15,0,160,161,5,8,0,0,161,188,1,0,0,0,162,163,3,32,16,0,163,164,5,
		8,0,0,164,188,1,0,0,0,165,166,3,34,17,0,166,167,5,8,0,0,167,188,1,0,0,
		0,168,169,3,36,18,0,169,170,5,8,0,0,170,188,1,0,0,0,171,188,3,58,29,0,
		172,188,3,60,30,0,173,188,3,66,33,0,174,188,3,68,34,0,175,176,3,78,39,
		0,176,177,5,8,0,0,177,188,1,0,0,0,178,179,3,80,40,0,179,180,5,8,0,0,180,
		188,1,0,0,0,181,182,3,82,41,0,182,183,5,8,0,0,183,188,1,0,0,0,184,185,
		3,84,42,0,185,186,5,8,0,0,186,188,1,0,0,0,187,134,1,0,0,0,187,135,1,0,
		0,0,187,138,1,0,0,0,187,141,1,0,0,0,187,144,1,0,0,0,187,147,1,0,0,0,187,
		150,1,0,0,0,187,153,1,0,0,0,187,156,1,0,0,0,187,159,1,0,0,0,187,162,1,
		0,0,0,187,165,1,0,0,0,187,168,1,0,0,0,187,171,1,0,0,0,187,172,1,0,0,0,
		187,173,1,0,0,0,187,174,1,0,0,0,187,175,1,0,0,0,187,178,1,0,0,0,187,181,
		1,0,0,0,187,184,1,0,0,0,188,15,1,0,0,0,189,190,7,0,0,0,190,17,1,0,0,0,
		191,192,7,1,0,0,192,193,5,18,0,0,193,194,5,33,0,0,194,201,3,70,35,0,195,
		196,7,1,0,0,196,201,5,18,0,0,197,198,5,18,0,0,198,199,5,33,0,0,199,201,
		3,70,35,0,200,191,1,0,0,0,200,195,1,0,0,0,200,197,1,0,0,0,201,19,1,0,0,
		0,202,203,7,1,0,0,203,204,5,18,0,0,204,205,5,1,0,0,205,206,5,19,0,0,206,
		212,5,2,0,0,207,208,5,33,0,0,208,209,5,37,0,0,209,210,3,22,11,0,210,211,
		5,38,0,0,211,213,1,0,0,0,212,207,1,0,0,0,212,213,1,0,0,0,213,21,1,0,0,
		0,214,219,3,70,35,0,215,216,5,39,0,0,216,218,3,70,35,0,217,215,1,0,0,0,
		218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,23,1,0,0,0,221,219,
		1,0,0,0,222,223,7,1,0,0,223,224,5,24,0,0,224,225,5,18,0,0,225,25,1,0,0,
		0,226,227,5,18,0,0,227,228,5,33,0,0,228,229,5,3,0,0,229,230,5,18,0,0,230,
		27,1,0,0,0,231,232,5,24,0,0,232,233,5,18,0,0,233,234,5,33,0,0,234,235,
		3,70,35,0,235,29,1,0,0,0,236,237,5,41,0,0,237,238,5,35,0,0,238,239,5,21,
		0,0,239,240,5,39,0,0,240,241,5,3,0,0,241,242,5,18,0,0,242,243,5,36,0,0,
		243,31,1,0,0,0,244,245,5,42,0,0,245,246,5,35,0,0,246,251,5,20,0,0,247,
		248,5,39,0,0,248,250,3,70,35,0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,
		1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,36,0,
		0,255,256,5,8,0,0,256,33,1,0,0,0,257,258,5,43,0,0,258,259,5,35,0,0,259,
		260,5,18,0,0,260,261,5,36,0,0,261,35,1,0,0,0,262,263,5,44,0,0,263,264,
		5,35,0,0,264,265,5,18,0,0,265,266,5,36,0,0,266,37,1,0,0,0,267,268,7,1,
		0,0,268,269,5,18,0,0,269,271,5,35,0,0,270,272,3,42,21,0,271,270,1,0,0,
		0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,5,36,0,0,274,275,3,12,6,0,275,
		39,1,0,0,0,276,277,5,18,0,0,277,279,5,35,0,0,278,280,3,44,22,0,279,278,
		1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,5,36,0,0,282,41,1,0,0,
		0,283,284,7,1,0,0,284,290,5,18,0,0,285,286,5,39,0,0,286,287,7,1,0,0,287,
		289,5,18,0,0,288,285,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,
		0,0,0,291,43,1,0,0,0,292,290,1,0,0,0,293,298,3,70,35,0,294,295,5,39,0,
		0,295,297,3,70,35,0,296,294,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,
		299,1,0,0,0,299,45,1,0,0,0,300,298,1,0,0,0,301,302,5,45,0,0,302,303,5,
		18,0,0,303,304,5,37,0,0,304,305,3,48,24,0,305,306,5,38,0,0,306,307,5,8,
		0,0,307,47,1,0,0,0,308,309,7,1,0,0,309,310,5,18,0,0,310,312,5,8,0,0,311,
		308,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,49,1,0,
		0,0,315,316,5,46,0,0,316,317,5,18,0,0,317,318,5,37,0,0,318,319,3,52,26,
		0,319,320,5,38,0,0,320,321,5,8,0,0,321,51,1,0,0,0,322,323,7,1,0,0,323,
		324,5,18,0,0,324,326,5,8,0,0,325,322,1,0,0,0,326,327,1,0,0,0,327,325,1,
		0,0,0,327,328,1,0,0,0,328,53,1,0,0,0,329,330,5,18,0,0,330,331,5,34,0,0,
		331,332,5,18,0,0,332,333,5,33,0,0,333,338,3,70,35,0,334,335,5,18,0,0,335,
		336,5,34,0,0,336,338,5,18,0,0,337,329,1,0,0,0,337,334,1,0,0,0,338,55,1,
		0,0,0,339,340,5,18,0,0,340,341,5,34,0,0,341,342,5,18,0,0,342,343,5,33,
		0,0,343,348,3,70,35,0,344,345,5,18,0,0,345,346,5,34,0,0,346,348,5,18,0,
		0,347,339,1,0,0,0,347,344,1,0,0,0,348,57,1,0,0,0,349,350,5,47,0,0,350,
		351,5,35,0,0,351,352,3,76,38,0,352,353,5,36,0,0,353,354,3,12,6,0,354,364,
		1,0,0,0,355,356,5,47,0,0,356,357,5,35,0,0,357,358,3,76,38,0,358,359,5,
		36,0,0,359,360,3,12,6,0,360,361,5,48,0,0,361,362,3,12,6,0,362,364,1,0,
		0,0,363,349,1,0,0,0,363,355,1,0,0,0,364,59,1,0,0,0,365,366,5,49,0,0,366,
		367,5,35,0,0,367,368,5,18,0,0,368,369,5,36,0,0,369,371,5,37,0,0,370,372,
		3,62,31,0,371,370,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,
		0,0,374,376,1,0,0,0,375,377,3,64,32,0,376,375,1,0,0,0,376,377,1,0,0,0,
		377,378,1,0,0,0,378,379,5,38,0,0,379,61,1,0,0,0,380,381,5,50,0,0,381,382,
		5,19,0,0,382,386,5,4,0,0,383,385,3,14,7,0,384,383,1,0,0,0,385,388,1,0,
		0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,
		390,5,51,0,0,390,391,5,8,0,0,391,63,1,0,0,0,392,393,5,52,0,0,393,397,5,
		4,0,0,394,396,3,14,7,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,
		397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,401,5,51,0,0,401,402,
		5,8,0,0,402,65,1,0,0,0,403,404,5,53,0,0,404,405,5,35,0,0,405,406,3,76,
		38,0,406,407,5,36,0,0,407,408,3,12,6,0,408,420,1,0,0,0,409,410,5,54,0,
		0,410,411,5,35,0,0,411,412,3,18,9,0,412,413,5,8,0,0,413,414,3,76,38,0,
		414,415,5,8,0,0,415,416,3,18,9,0,416,417,5,36,0,0,417,418,3,12,6,0,418,
		420,1,0,0,0,419,403,1,0,0,0,419,409,1,0,0,0,420,67,1,0,0,0,421,422,5,55,
		0,0,422,423,3,12,6,0,423,424,5,53,0,0,424,425,5,35,0,0,425,426,3,76,38,
		0,426,427,5,36,0,0,427,428,5,8,0,0,428,69,1,0,0,0,429,436,3,72,36,0,430,
		431,5,22,0,0,431,435,3,72,36,0,432,433,5,23,0,0,433,435,3,72,36,0,434,
		430,1,0,0,0,434,432,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,
		0,0,0,437,71,1,0,0,0,438,436,1,0,0,0,439,448,3,74,37,0,440,441,5,24,0,
		0,441,447,3,74,37,0,442,443,5,25,0,0,443,447,3,74,37,0,444,445,5,26,0,
		0,445,447,3,74,37,0,446,440,1,0,0,0,446,442,1,0,0,0,446,444,1,0,0,0,447,
		450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,73,1,0,0,0,450,448,1,0,
		0,0,451,452,5,35,0,0,452,453,3,70,35,0,453,454,5,36,0,0,454,466,1,0,0,
		0,455,466,5,19,0,0,456,466,5,18,0,0,457,466,5,20,0,0,458,466,5,14,0,0,
		459,460,5,18,0,0,460,461,5,31,0,0,461,466,5,31,0,0,462,463,5,18,0,0,463,
		464,5,32,0,0,464,466,5,32,0,0,465,451,1,0,0,0,465,455,1,0,0,0,465,456,
		1,0,0,0,465,457,1,0,0,0,465,458,1,0,0,0,465,459,1,0,0,0,465,462,1,0,0,
		0,466,75,1,0,0,0,467,468,6,38,-1,0,468,471,3,70,35,0,469,470,5,30,0,0,
		470,472,3,70,35,0,471,469,1,0,0,0,471,472,1,0,0,0,472,476,1,0,0,0,473,
		474,5,29,0,0,474,476,3,76,38,1,475,467,1,0,0,0,475,473,1,0,0,0,476,485,
		1,0,0,0,477,478,10,3,0,0,478,479,5,27,0,0,479,484,3,76,38,4,480,481,10,
		2,0,0,481,482,5,28,0,0,482,484,3,76,38,3,483,477,1,0,0,0,483,480,1,0,0,
		0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,77,1,0,0,0,487,485,
		1,0,0,0,488,489,5,35,0,0,489,490,7,1,0,0,490,491,5,36,0,0,491,492,5,18,
		0,0,492,79,1,0,0,0,493,494,5,56,0,0,494,495,5,35,0,0,495,496,5,18,0,0,
		496,497,5,36,0,0,497,81,1,0,0,0,498,499,3,76,38,0,499,500,5,5,0,0,500,
		501,3,12,6,0,501,502,5,4,0,0,502,503,3,12,6,0,503,83,1,0,0,0,504,505,5,
		40,0,0,505,508,3,70,35,0,506,508,5,40,0,0,507,504,1,0,0,0,507,506,1,0,
		0,0,508,85,1,0,0,0,35,92,94,104,113,115,129,187,200,212,219,251,271,279,
		290,298,313,327,337,347,363,373,376,386,397,419,434,436,446,448,465,471,
		475,483,485,507
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
