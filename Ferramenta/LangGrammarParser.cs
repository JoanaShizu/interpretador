//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LangGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LangGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, EOL=34, TYPE=35, VAR=36, NUM=37, FLOAT_NUM=38, CHAR=39, 
		STRING=40, COMMENT=41, BLOCK_COMMENT=42, WS=43;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_initialization = 3, 
		RULE_expression = 4, RULE_term = 5, RULE_expression_list = 6, RULE_input_statement = 7, 
		RULE_output_statement = 8, RULE_control_structure = 9, RULE_if_statement = 10, 
		RULE_switch_statement = 11, RULE_case_clause = 12, RULE_for_loop = 13, 
		RULE_while_loop = 14, RULE_do_while_loop = 15, RULE_block = 16, RULE_function_definition = 17, 
		RULE_parameter_list = 18, RULE_function_call = 19, RULE_argument_list = 20, 
		RULE_return_statement = 21, RULE_pointer_manipulation = 22, RULE_struct_union_definition = 23, 
		RULE_struct_members = 24, RULE_preprocessor_directive = 25;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "initialization", "expression", 
		"term", "expression_list", "input_statement", "output_statement", "control_structure", 
		"if_statement", "switch_statement", "case_clause", "for_loop", "while_loop", 
		"do_while_loop", "block", "function_definition", "parameter_list", "function_call", 
		"argument_list", "return_statement", "pointer_manipulation", "struct_union_definition", 
		"struct_members", "preprocessor_directive"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'='", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'('", "')'", "','", "'scanf'", "'&'", "'printf'", "'if'", "'else'", "'switch'", 
		"'default'", "':'", "'case'", "'for'", "'while'", "'do'", "'void'", "'return'", 
		"'struct'", "'union'", "'#include'", "'<'", "'>'", "'#define'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "EOL", "TYPE", 
		"VAR", "NUM", "FLOAT_NUM", "CHAR", "STRING", "COMMENT", "BLOCK_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LangGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				statement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 113808982272L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangGrammarParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializationContext initialization() {
			return GetRuleContext<InitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Control_structureContext control_structure() {
			return GetRuleContext<Control_structureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_statementContext output_statement() {
			return GetRuleContext<Output_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_directiveContext preprocessor_directive() {
			return GetRuleContext<Preprocessor_directiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_union_definitionContext struct_union_definition() {
			return GetRuleContext<Struct_union_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_manipulationContext pointer_manipulation() {
			return GetRuleContext<Pointer_manipulationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				declaration();
				State = 58;
				Match(EOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				initialization();
				State = 61;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				control_structure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				function_definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				function_call();
				State = 66;
				Match(EOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				input_statement();
				State = 69;
				Match(EOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				output_statement();
				State = 72;
				Match(EOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 74;
				preprocessor_directive();
				State = 75;
				Match(EOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 77;
				return_statement();
				State = 78;
				Match(EOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 80;
				struct_union_definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 81;
				pointer_manipulation();
				State = 82;
				Match(EOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LangGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(TYPE);
				State = 87;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(TYPE);
				State = 89;
				Match(VAR);
				State = 90;
				Match(T__0);
				State = 91;
				Match(NUM);
				State = 92;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LangGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public InitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterInitialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitInitialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializationContext initialization() {
		InitializationContext _localctx = new InitializationContext(Context, State);
		EnterRule(_localctx, 6, RULE_initialization);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(TYPE);
				State = 96;
				Match(VAR);
				State = 97;
				Match(T__2);
				State = 98;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				Match(TYPE);
				State = 100;
				Match(VAR);
				State = 101;
				Match(T__0);
				State = 102;
				Match(NUM);
				State = 103;
				Match(T__1);
				State = 104;
				Match(T__2);
				State = 105;
				Match(T__3);
				State = 106;
				expression_list();
				State = 107;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			term();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) {
				{
				{
				State = 112;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 113;
				term();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUM() { return GetToken(LangGrammarParser.FLOAT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LangGrammarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 10, RULE_term);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				Match(NUM);
				}
				break;
			case FLOAT_NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(FLOAT_NUM);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				Match(CHAR);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				Match(STRING);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				Match(VAR);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				Match(T__10);
				State = 125;
				expression();
				State = 126;
				Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			expression();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 131;
				Match(T__12);
				State = 132;
				expression();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		public Input_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterInput_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitInput_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_statementContext input_statement() {
		Input_statementContext _localctx = new Input_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_input_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__13);
			State = 139;
			Match(T__10);
			State = 140;
			Match(STRING);
			State = 141;
			Match(T__12);
			State = 142;
			Match(T__14);
			State = 143;
			Match(VAR);
			State = 144;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_statementContext : ParserRuleContext {
		public Output_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_statement; } }
	 
		public Output_statementContext() { }
		public virtual void CopyFrom(Output_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputContext : Output_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OutputContext(Output_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_statementContext output_statement() {
		Output_statementContext _localctx = new Output_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_output_statement);
		int _la;
		try {
			_localctx = new OutputContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__15);
			State = 147;
			Match(T__10);
			State = 148;
			Match(STRING);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 149;
				Match(T__12);
				State = 150;
				expression();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_structureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_loopContext do_while_loop() {
			return GetRuleContext<Do_while_loopContext>(0);
		}
		public Control_structureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterControl_structure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitControl_structure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_structure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_structureContext control_structure() {
		Control_structureContext _localctx = new Control_structureContext(Context, State);
		EnterRule(_localctx, 18, RULE_control_structure);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				if_statement();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				switch_statement();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				for_loop();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161;
				while_loop();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 5);
				{
				State = 162;
				do_while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__16);
			State = 166;
			Match(T__10);
			State = 167;
			expression();
			State = 168;
			Match(T__11);
			State = 169;
			block();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 170;
				Match(T__17);
				State = 171;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_clauseContext[] case_clause() {
			return GetRuleContexts<Case_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_clauseContext case_clause(int i) {
			return GetRuleContext<Case_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_switch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__18);
			State = 175;
			Match(T__10);
			State = 176;
			Match(VAR);
			State = 177;
			Match(T__11);
			State = 178;
			Match(T__3);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 179;
				case_clause();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 185;
				Match(T__19);
				State = 186;
				Match(T__20);
				State = 187;
				block();
				}
			}

			State = 190;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangGrammarParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Case_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterCase_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitCase_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_clauseContext case_clause() {
		Case_clauseContext _localctx = new Case_clauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_case_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__21);
			State = 193;
			Match(NUM);
			State = 194;
			Match(T__20);
			State = 195;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializationContext initialization() {
			return GetRuleContext<InitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangGrammarParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangGrammarParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 26, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__22);
			State = 198;
			Match(T__10);
			State = 199;
			initialization();
			State = 200;
			Match(EOL);
			State = 201;
			expression();
			State = 202;
			Match(EOL);
			State = 203;
			Match(VAR);
			State = 204;
			Match(T__2);
			State = 205;
			expression();
			State = 206;
			Match(T__11);
			State = 207;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 28, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(T__23);
			State = 210;
			Match(T__10);
			State = 211;
			expression();
			State = 212;
			Match(T__11);
			State = 213;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterDo_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitDo_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_loopContext do_while_loop() {
		Do_while_loopContext _localctx = new Do_while_loopContext(Context, State);
		EnterRule(_localctx, 30, RULE_do_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__24);
			State = 216;
			block();
			State = 217;
			Match(T__23);
			State = 218;
			Match(T__10);
			State = 219;
			expression();
			State = 220;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__3);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 113808982272L) != 0)) {
				{
				{
				State = 223;
				statement();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LangGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_function_definition);
		int _la;
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(TYPE);
				State = 232;
				Match(VAR);
				State = 233;
				Match(T__10);
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE) {
					{
					State = 234;
					parameter_list();
					}
				}

				State = 237;
				Match(T__11);
				State = 238;
				block();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				Match(T__25);
				State = 240;
				Match(VAR);
				State = 241;
				Match(T__10);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE) {
					{
					State = 242;
					parameter_list();
					}
				}

				State = 245;
				Match(T__11);
				State = 246;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(LangGrammarParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(LangGrammarParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(TYPE);
			State = 250;
			Match(VAR);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 251;
				Match(T__12);
				State = 252;
				Match(TYPE);
				State = 253;
				Match(VAR);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(VAR);
			State = 260;
			Match(T__10);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2130303780864L) != 0)) {
				{
				State = 261;
				argument_list();
				}
			}

			State = 264;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__26);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2130303780864L) != 0)) {
				{
				State = 269;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_manipulationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LangGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Pointer_manipulationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_manipulation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPointer_manipulation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPointer_manipulation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_manipulation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_manipulationContext pointer_manipulation() {
		Pointer_manipulationContext _localctx = new Pointer_manipulationContext(Context, State);
		EnterRule(_localctx, 44, RULE_pointer_manipulation);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(TYPE);
				State = 273;
				Match(T__7);
				State = 274;
				Match(VAR);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				Match(VAR);
				State = 276;
				Match(T__2);
				State = 277;
				Match(T__14);
				State = 278;
				Match(VAR);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 279;
				Match(T__7);
				State = 280;
				Match(VAR);
				State = 281;
				Match(T__2);
				State = 282;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_union_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_membersContext struct_members() {
			return GetRuleContext<Struct_membersContext>(0);
		}
		public Struct_union_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_union_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_union_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_union_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_union_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_union_definitionContext struct_union_definition() {
		Struct_union_definitionContext _localctx = new Struct_union_definitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_struct_union_definition);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(T__27);
				State = 286;
				Match(VAR);
				State = 287;
				Match(T__3);
				State = 288;
				struct_members();
				State = 289;
				Match(T__4);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				Match(T__28);
				State = 292;
				Match(VAR);
				State = 293;
				Match(T__3);
				State = 294;
				struct_members();
				State = 295;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_membersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(LangGrammarParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(LangGrammarParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangGrammarParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangGrammarParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangGrammarParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangGrammarParser.EOL, i);
		}
		public Struct_membersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_members; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_members(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_members(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_members(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_membersContext struct_members() {
		Struct_membersContext _localctx = new Struct_membersContext(Context, State);
		EnterRule(_localctx, 48, RULE_struct_members);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 299;
				Match(TYPE);
				State = 300;
				Match(VAR);
				State = 301;
				Match(EOL);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TYPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Preprocessor_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.EnterPreprocessor_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangGrammarListener typedListener = listener as ILangGrammarListener;
			if (typedListener != null) typedListener.ExitPreprocessor_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangGrammarVisitor<TResult> typedVisitor = visitor as ILangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_directiveContext preprocessor_directive() {
		Preprocessor_directiveContext _localctx = new Preprocessor_directiveContext(Context, State);
		EnterRule(_localctx, 50, RULE_preprocessor_directive);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				Match(T__29);
				State = 307;
				Match(T__30);
				State = 308;
				Match(VAR);
				State = 309;
				Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(T__32);
				State = 311;
				Match(VAR);
				State = 312;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,43,316,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,4,0,54,8,0,11,0,12,0,55,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,85,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,94,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,110,8,3,1,4,1,4,1,4,5,4,115,8,4,10,4,12,4,118,9,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,3,5,129,8,5,1,6,1,6,1,6,5,6,134,8,6,10,6,12,6,137,
		9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,152,8,8,10,
		8,12,8,155,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,164,8,9,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,3,10,173,8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,181,
		8,11,10,11,12,11,184,9,11,1,11,1,11,1,11,3,11,189,8,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,16,1,16,5,16,225,8,16,10,16,12,16,228,9,16,1,16,1,16,1,17,1,17,
		1,17,1,17,3,17,236,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,244,8,17,1,
		17,1,17,3,17,248,8,17,1,18,1,18,1,18,1,18,1,18,5,18,255,8,18,10,18,12,
		18,258,9,18,1,19,1,19,1,19,3,19,263,8,19,1,19,1,19,1,20,1,20,1,21,1,21,
		3,21,271,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,
		22,284,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		3,23,298,8,23,1,24,1,24,1,24,4,24,303,8,24,11,24,12,24,304,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,3,25,314,8,25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,0,1,1,0,6,10,329,0,
		53,1,0,0,0,2,84,1,0,0,0,4,93,1,0,0,0,6,109,1,0,0,0,8,111,1,0,0,0,10,128,
		1,0,0,0,12,130,1,0,0,0,14,138,1,0,0,0,16,146,1,0,0,0,18,163,1,0,0,0,20,
		165,1,0,0,0,22,174,1,0,0,0,24,192,1,0,0,0,26,197,1,0,0,0,28,209,1,0,0,
		0,30,215,1,0,0,0,32,222,1,0,0,0,34,247,1,0,0,0,36,249,1,0,0,0,38,259,1,
		0,0,0,40,266,1,0,0,0,42,268,1,0,0,0,44,283,1,0,0,0,46,297,1,0,0,0,48,302,
		1,0,0,0,50,313,1,0,0,0,52,54,3,2,1,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,
		1,0,0,0,55,56,1,0,0,0,56,1,1,0,0,0,57,58,3,4,2,0,58,59,5,34,0,0,59,85,
		1,0,0,0,60,61,3,6,3,0,61,62,5,34,0,0,62,85,1,0,0,0,63,85,3,18,9,0,64,85,
		3,34,17,0,65,66,3,38,19,0,66,67,5,34,0,0,67,85,1,0,0,0,68,69,3,14,7,0,
		69,70,5,34,0,0,70,85,1,0,0,0,71,72,3,16,8,0,72,73,5,34,0,0,73,85,1,0,0,
		0,74,75,3,50,25,0,75,76,5,34,0,0,76,85,1,0,0,0,77,78,3,42,21,0,78,79,5,
		34,0,0,79,85,1,0,0,0,80,85,3,46,23,0,81,82,3,44,22,0,82,83,5,34,0,0,83,
		85,1,0,0,0,84,57,1,0,0,0,84,60,1,0,0,0,84,63,1,0,0,0,84,64,1,0,0,0,84,
		65,1,0,0,0,84,68,1,0,0,0,84,71,1,0,0,0,84,74,1,0,0,0,84,77,1,0,0,0,84,
		80,1,0,0,0,84,81,1,0,0,0,85,3,1,0,0,0,86,87,5,35,0,0,87,94,5,36,0,0,88,
		89,5,35,0,0,89,90,5,36,0,0,90,91,5,1,0,0,91,92,5,37,0,0,92,94,5,2,0,0,
		93,86,1,0,0,0,93,88,1,0,0,0,94,5,1,0,0,0,95,96,5,35,0,0,96,97,5,36,0,0,
		97,98,5,3,0,0,98,110,3,8,4,0,99,100,5,35,0,0,100,101,5,36,0,0,101,102,
		5,1,0,0,102,103,5,37,0,0,103,104,5,2,0,0,104,105,5,3,0,0,105,106,5,4,0,
		0,106,107,3,12,6,0,107,108,5,5,0,0,108,110,1,0,0,0,109,95,1,0,0,0,109,
		99,1,0,0,0,110,7,1,0,0,0,111,116,3,10,5,0,112,113,7,0,0,0,113,115,3,10,
		5,0,114,112,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,
		9,1,0,0,0,118,116,1,0,0,0,119,129,5,37,0,0,120,129,5,38,0,0,121,129,5,
		39,0,0,122,129,5,40,0,0,123,129,5,36,0,0,124,125,5,11,0,0,125,126,3,8,
		4,0,126,127,5,12,0,0,127,129,1,0,0,0,128,119,1,0,0,0,128,120,1,0,0,0,128,
		121,1,0,0,0,128,122,1,0,0,0,128,123,1,0,0,0,128,124,1,0,0,0,129,11,1,0,
		0,0,130,135,3,8,4,0,131,132,5,13,0,0,132,134,3,8,4,0,133,131,1,0,0,0,134,
		137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,13,1,0,0,0,137,135,1,0,
		0,0,138,139,5,14,0,0,139,140,5,11,0,0,140,141,5,40,0,0,141,142,5,13,0,
		0,142,143,5,15,0,0,143,144,5,36,0,0,144,145,5,12,0,0,145,15,1,0,0,0,146,
		147,5,16,0,0,147,148,5,11,0,0,148,153,5,40,0,0,149,150,5,13,0,0,150,152,
		3,8,4,0,151,149,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,
		0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,5,12,0,0,157,17,1,0,0,0,158,
		164,3,20,10,0,159,164,3,22,11,0,160,164,3,26,13,0,161,164,3,28,14,0,162,
		164,3,30,15,0,163,158,1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,163,161,
		1,0,0,0,163,162,1,0,0,0,164,19,1,0,0,0,165,166,5,17,0,0,166,167,5,11,0,
		0,167,168,3,8,4,0,168,169,5,12,0,0,169,172,3,32,16,0,170,171,5,18,0,0,
		171,173,3,32,16,0,172,170,1,0,0,0,172,173,1,0,0,0,173,21,1,0,0,0,174,175,
		5,19,0,0,175,176,5,11,0,0,176,177,5,36,0,0,177,178,5,12,0,0,178,182,5,
		4,0,0,179,181,3,24,12,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,
		0,182,183,1,0,0,0,183,188,1,0,0,0,184,182,1,0,0,0,185,186,5,20,0,0,186,
		187,5,21,0,0,187,189,3,32,16,0,188,185,1,0,0,0,188,189,1,0,0,0,189,190,
		1,0,0,0,190,191,5,5,0,0,191,23,1,0,0,0,192,193,5,22,0,0,193,194,5,37,0,
		0,194,195,5,21,0,0,195,196,3,32,16,0,196,25,1,0,0,0,197,198,5,23,0,0,198,
		199,5,11,0,0,199,200,3,6,3,0,200,201,5,34,0,0,201,202,3,8,4,0,202,203,
		5,34,0,0,203,204,5,36,0,0,204,205,5,3,0,0,205,206,3,8,4,0,206,207,5,12,
		0,0,207,208,3,32,16,0,208,27,1,0,0,0,209,210,5,24,0,0,210,211,5,11,0,0,
		211,212,3,8,4,0,212,213,5,12,0,0,213,214,3,32,16,0,214,29,1,0,0,0,215,
		216,5,25,0,0,216,217,3,32,16,0,217,218,5,24,0,0,218,219,5,11,0,0,219,220,
		3,8,4,0,220,221,5,12,0,0,221,31,1,0,0,0,222,226,5,4,0,0,223,225,3,2,1,
		0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,
		229,1,0,0,0,228,226,1,0,0,0,229,230,5,5,0,0,230,33,1,0,0,0,231,232,5,35,
		0,0,232,233,5,36,0,0,233,235,5,11,0,0,234,236,3,36,18,0,235,234,1,0,0,
		0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,5,12,0,0,238,248,3,32,16,0,239,
		240,5,26,0,0,240,241,5,36,0,0,241,243,5,11,0,0,242,244,3,36,18,0,243,242,
		1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,5,12,0,0,246,248,3,32,
		16,0,247,231,1,0,0,0,247,239,1,0,0,0,248,35,1,0,0,0,249,250,5,35,0,0,250,
		256,5,36,0,0,251,252,5,13,0,0,252,253,5,35,0,0,253,255,5,36,0,0,254,251,
		1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,37,1,0,0,0,
		258,256,1,0,0,0,259,260,5,36,0,0,260,262,5,11,0,0,261,263,3,40,20,0,262,
		261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,5,12,0,0,265,39,1,
		0,0,0,266,267,3,12,6,0,267,41,1,0,0,0,268,270,5,27,0,0,269,271,3,8,4,0,
		270,269,1,0,0,0,270,271,1,0,0,0,271,43,1,0,0,0,272,273,5,35,0,0,273,274,
		5,8,0,0,274,284,5,36,0,0,275,276,5,36,0,0,276,277,5,3,0,0,277,278,5,15,
		0,0,278,284,5,36,0,0,279,280,5,8,0,0,280,281,5,36,0,0,281,282,5,3,0,0,
		282,284,3,8,4,0,283,272,1,0,0,0,283,275,1,0,0,0,283,279,1,0,0,0,284,45,
		1,0,0,0,285,286,5,28,0,0,286,287,5,36,0,0,287,288,5,4,0,0,288,289,3,48,
		24,0,289,290,5,5,0,0,290,298,1,0,0,0,291,292,5,29,0,0,292,293,5,36,0,0,
		293,294,5,4,0,0,294,295,3,48,24,0,295,296,5,5,0,0,296,298,1,0,0,0,297,
		285,1,0,0,0,297,291,1,0,0,0,298,47,1,0,0,0,299,300,5,35,0,0,300,301,5,
		36,0,0,301,303,5,34,0,0,302,299,1,0,0,0,303,304,1,0,0,0,304,302,1,0,0,
		0,304,305,1,0,0,0,305,49,1,0,0,0,306,307,5,30,0,0,307,308,5,31,0,0,308,
		309,5,36,0,0,309,314,5,32,0,0,310,311,5,33,0,0,311,312,5,36,0,0,312,314,
		3,8,4,0,313,306,1,0,0,0,313,310,1,0,0,0,314,51,1,0,0,0,23,55,84,93,109,
		116,128,135,153,163,172,182,188,226,235,243,247,256,262,270,283,297,304,
		313
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
